# HG changeset patch
# User Fabrice Desr√© <fabrice@mozilla.com>
# Parent 6259b6a19a42e352ac8cc56719f75ccc2ce4f15e
Checks if a webapp is already installed

diff --git a/embedding/android/GeckoAppShell.java b/embedding/android/GeckoAppShell.java
--- a/embedding/android/GeckoAppShell.java
+++ b/embedding/android/GeckoAppShell.java
@@ -564,6 +564,24 @@ class GeckoAppShell
         GeckoApp.mAppContext.sendBroadcast(intent);
     }
 
+    // installed webapps have the installation URI stored in the webapp_uri meta-data field
+    static boolean isApplicationInstalled(String aURI) {
+        PackageManager pm = GeckoApp.surfaceView.getContext().getPackageManager();
+        List<PackageInfo> list = pm.getInstalledPackages(PackageManager.GET_ACTIVITIES | PackageManager.GET_META_DATA);
+        for (int i = 0; i < list.size(); i++) {
+            ActivityInfo[] activities = list.get(i).activities;
+            if (activities == null)
+              continue;
+            for (int j = 0; j < activities.length; j++) {
+                ActivityInfo activity = activities[j];
+                Bundle meta = activity.metaData;
+                if ((meta != null) && meta.containsKey("webapp_uri")  && (meta.getString("webapp_uri").equals(aURI)))
+                    return true;
+            }
+        }
+        return false;
+    }
+
     static String[] getHandlersForMimeType(String aMimeType, String aAction) {
         Intent intent = getIntentForActionString(aAction);
         if (aMimeType != null && aMimeType.length() > 0)
diff --git a/toolkit/components/webapps/nsWebappsSupport.cpp b/toolkit/components/webapps/nsWebappsSupport.cpp
--- a/toolkit/components/webapps/nsWebappsSupport.cpp
+++ b/toolkit/components/webapps/nsWebappsSupport.cpp
@@ -72,7 +72,20 @@ nsWebappsSupport::InstallApplication(con
 NS_IMETHODIMP
 nsWebappsSupport::IsApplicationInstalled(const PRUnichar *aURI, PRBool *_retval)
 {
-  *_retval = PR_FALSE;
+  ALOG("in nsWebappsSupport::InstallApplication()\n");
+  AndroidBridge::AutoLocalJNIFrame jniFrame;
+  JNIEnv *jEnv = GetJNIForThread();
+  jclass jGeckoAppShellClass = GetGeckoAppShellClass();
+  
+  if (!jEnv || !jGeckoAppShellClass)
+    return NS_ERROR_FAILURE;
+  
+  jmethodID jIsApplicationInstalled = jEnv->GetStaticMethodID(jGeckoAppShellClass, "isApplicationInstalled", "(Ljava/lang/String;)Z");
+  jstring jstrURI = jEnv->NewString(aURI, NS_strlen(aURI));
+  
+  jboolean res = jEnv->CallStaticBooleanMethod(jGeckoAppShellClass, jIsApplicationInstalled, jstrURI);
+  
+  *_retval = (res ? PR_TRUE : PR_FALSE);
   return NS_OK;
 }
 
