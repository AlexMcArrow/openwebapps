# HG changeset patch
# Parent 9a2c59f1cb7a3fab380bc026e07a2e0b887eac08
# User Fabrice Desré <fabrice@mozilla.com>

Bug 599899 - web apps should not open panels targeted at the "classic" browser window

diff --git a/mobile/chrome/content/downloads.js b/mobile/chrome/content/downloads.js
--- a/mobile/chrome/content/downloads.js
+++ b/mobile/chrome/content/downloads.js
@@ -37,12 +37,6 @@
 
 Components.utils.import("resource://gre/modules/DownloadUtils.jsm");
 
-#ifdef ANDROID
-const URI_GENERIC_ICON_DOWNLOAD = "drawable://alertdownloads";
-#else
-const URI_GENERIC_ICON_DOWNLOAD = "chrome://browser/skin/images/alert-downloads-30.png";
-#endif
-
 var DownloadsView = {
   _initialized: false,
   _list: null,
@@ -136,16 +130,9 @@ var DownloadsView = {
     this._initialized = true;
 
     // Monitor downloads and display alerts
-    var os = Services.obs;
-    os.addObserver(this, "dl-start", true);
-    os.addObserver(this, "dl-failed", true);
-    os.addObserver(this, "dl-done", true);
-    os.addObserver(this, "dl-blocked", true);
-    os.addObserver(this, "dl-dirty", true);
-    os.addObserver(this, "dl-cancel", true);
-
-    // Monitor downloads being removed by the download manager (non-UI)
-    os.addObserver(this, "download-manager-remove-download", true);
+    Cu.import("resource:///modules/downloadObserver.jsm");
+    
+    DownloadObserver.init();
   },
 
   delayedInit: function dv__delayedInit() {
@@ -441,53 +428,6 @@ var DownloadsView = {
       aIcon = URI_GENERIC_ICON_DOWNLOAD;
 
     notifier.showAlertNotification(aIcon, aTitle, aMessage, true, "", observer, aName);
-  },
-
-  observe: function (aSubject, aTopic, aData) {
-    if (aTopic == "download-manager-remove-download") {
-      // A null subject here indicates "remove multiple", so we just rebuild.
-      if (!aSubject) {
-        // Rebuild the default view
-        this.getDownloads();
-        return;
-      }
-
-      // Otherwise, remove a single download
-      let id = aSubject.QueryInterface(Ci.nsISupportsPRUint32);
-      let element = this.getElementForDownload(id.data);
-      this._removeItem(element);
-
-      // Show empty message if needed
-      this._ifEmptyShowMessage();
-    }
-    else {
-      let download = aSubject.QueryInterface(Ci.nsIDownload);
-      let msgKey = "";
-
-      if (aTopic == "dl-start") {
-        msgKey = "alertDownloadsStart";
-        if (!this._progressAlert) {
-          if (!this._dlmgr)
-            this._dlmgr = Cc["@mozilla.org/download-manager;1"].getService(Ci.nsIDownloadManager);
-          this._progressAlert = new AlertDownloadProgressListener();
-          this._dlmgr.addListener(this._progressAlert);
-        }
-      } else if (aTopic == "dl-done") {
-        msgKey = "alertDownloadsDone";
-      }
-
-      if (msgKey)
-        this.showAlert(download.target.spec.replace("file:", "download:"),
-                       Strings.browser.formatStringFromName(msgKey, [download.displayName], 1));
-    }
-  },
-
-  QueryInterface: function (aIID) {
-    if (!aIID.equals(Ci.nsIObserver) &&
-        !aIID.equals(Ci.nsISupportsWeakReference) &&
-        !aIID.equals(Ci.nsISupports))
-      throw Components.results.NS_ERROR_NO_INTERFACE;
-    return this;
   }
 };
 
diff --git a/mobile/modules/Makefile.in b/mobile/modules/Makefile.in
--- a/mobile/modules/Makefile.in
+++ b/mobile/modules/Makefile.in
@@ -55,6 +55,7 @@ endif
 
 EXTRA_PP_JS_MODULES = \
   contacts.jsm \
+  downloadObserver.jsm \
   $(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/mobile/modules/downloadObserver.jsm b/mobile/modules/downloadObserver.jsm
new file mode 100644
--- /dev/null
+++ b/mobile/modules/downloadObserver.jsm
@@ -0,0 +1,133 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Mobile Browser.
+ *
+ * The Initial Developer of the Original Code is Mozilla.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let EXPORTED_SYMBOLS = ["DownloadObserver"];
+
+const Cu = Components.utils;
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+Cu.import("resource://gre/modules/Services.jsm");
+
+#ifdef ANDROID
+const URI_GENERIC_ICON_DOWNLOAD = "drawable://alertdownloads";
+#else
+const URI_GENERIC_ICON_DOWNLOAD = "chrome://browser/skin/images/alert-downloads-30.png";
+#endif
+
+let DownloadObserver = {
+  _initialized: false,
+  _win: null,
+
+  init: function() {
+    if (this._init)
+      return;
+    var os = Services.obs;
+    os.addObserver(this, "dl-start", true);
+    os.addObserver(this, "dl-failed", true);
+    os.addObserver(this, "dl-done", true);
+    os.addObserver(this, "dl-blocked", true);
+    os.addObserver(this, "dl-dirty", true);
+    os.addObserver(this, "dl-cancel", true);
+
+    // Monitor downloads being removed by the download manager (non-UI)
+    os.addObserver(this, "download-manager-remove-download", true);
+    
+    this._initialized = true;
+  },
+
+  observe: function (aSubject, aTopic, aData) {
+    this._win = Services.wm.getMostRecentWindow("navigator:browser");
+    let view = this._win.DownloadsView;
+    if (aTopic == "download-manager-remove-download") {
+      // A null subject here indicates "remove multiple", so we just rebuild.
+      if (!aSubject) {
+        // Rebuild the default view
+        view.getDownloads();
+        return;
+      }
+
+      // Otherwise, remove a single download
+      let id = aSubject.QueryInterface(Ci.nsISupportsPRUint32);
+      let element = view.getElementForDownload(id.data);
+      view._removeItem(element);
+
+      // Show empty message if needed
+      view._ifEmptyShowMessage();
+    }
+    else {
+      // We only show alerts if the download view is not visible
+      if (view.visible)
+        return;
+
+      let download = aSubject.QueryInterface(Ci.nsIDownload);
+      let strings = this._win.Elements.browserBundle;
+      var notifier = Cc["@mozilla.org/alerts-service;1"].getService(Ci.nsIAlertsService);
+
+      // Callback for tapping on the alert popup
+      let observer = {
+        observe: function (aSubject, aTopic, aData) {
+          if (aTopic == "alertclickcallback")
+            DownloadObserver._win.BrowserUI.showPanel("downloads-container");
+        }
+      };
+
+      let msgKey = aTopic == "dl-start" ? "alertDownloadsStart" : "alertDownloadsDone";
+      notifier.showAlertNotification(URI_GENERIC_ICON_DOWNLOAD, strings.getString("alertDownloads"),
+                                     strings.getFormattedString(msgKey, [download.displayName]), true, "", observer,
+                                     download.target.spec.replace("file:", "download:"));
+
+#ifdef ANDROID
+    if (aTopic == "dl-start") {
+      if (view._dlmgr == null)
+        view._dlmgr = Cc["@mozilla.org/download-manager;1"].getService(Ci.nsIDownloadManager);
+
+      view._progressAlert = new view.AlertDownloadProgressListener();
+      view._dlmgr.addListener(view._progressAlert);
+    }
+#endif
+    }
+  },
+
+  QueryInterface: function (aIID) {
+    if (!aIID.equals(Ci.nsIObserver) &&
+        !aIID.equals(Ci.nsISupportsWeakReference) &&
+        !aIID.equals(Ci.nsISupports))
+      throw Components.results.NS_ERROR_NO_INTERFACE;
+    return this;
+  }
+}
+
