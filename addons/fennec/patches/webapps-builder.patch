# HG changeset patch
# User Fabrice Desr√© <fabrice@mozilla.com>
# Parent 1d1053fab4fcdf9634e0cd64e67eb03b4ee7e576
Integrate with the webapps builder

diff --git a/mobile/app/mobile.js b/mobile/app/mobile.js
--- a/mobile/app/mobile.js
+++ b/mobile/app/mobile.js
@@ -570,6 +570,9 @@ pref("browser.chrome.toolbar_tips", fals
 pref("indexedDB.feature.enabled", true);
 pref("dom.indexedDB.warningQuota", 5);
 
+// webapps builder URL
+pref("webapps.builder.url", "http://android-app.pub.phx1.mozilla.com/webappbuilder/package");
+
 // prevent video elements from preloading too much data
 pref("media.preload.default", 1); // default to preload none
 pref("media.preload.auto", 2);    // preload metadata if preload=auto
diff --git a/mobile/chrome/content/common-ui.js b/mobile/chrome/content/common-ui.js
--- a/mobile/chrome/content/common-ui.js
+++ b/mobile/chrome/content/common-ui.js
@@ -1473,11 +1473,38 @@ var WebappsUI = {
       let data = canvas.toDataURL("image/png", "");
       canvas.parentNode.removeChild(canvas);
       canvas = null;
-      try {
-        let webapp = Cc["@mozilla.org/webapps/installer;1"].getService(Ci.nsIWebappsSupport);
-        webapp.installApplication(aTitle, aURI, aIcon, data);
-        if (WebappsUI._manifest.successCallback)
-          WebappsUI._manifest.successCallback(WebappsUI._manifest);
+      try {  
+        let info = Cc["@mozilla.org/mime;1"].getService(Ci.nsIMIMEService).getFromTypeAndExtension("application/vnd.android.package-archive", "apk");
+        let handleAPK = info.hasDefaultHandler;
+        
+        // download an .apk and install it
+        if (handleAPK) {
+          Cu.import("resource://services-sync/util.js");
+          let url = Services.prefs.getCharPref("webapps.builder.url") + "android";
+          let json = Utils.encodeUTF8(Cc["@mozilla.org/dom/json;1"].createInstance(Ci.nsIJSON).encode({ name: aTitle, uri: aURI, icon: data.substring(22) }));
+          let is = Cc["@mozilla.org/io/string-input-stream;1"].createInstance(Ci.nsIStringInputStream);
+          is.setData(json, json.length);
+          // get a temp docShell
+          //let docShell = window.QueryInterface(Ci.nsIInterfaceRequestor)
+          //                  .getInterface(Ci.nsIWebNavigation)
+          //                  .QueryInterface(Ci.nsIDocShell);
+          try {
+            let docShell = Cc["@mozilla.org/docshell;1"].createInstance(Ci.nsIDocShell);
+            let channel = Services.io.newChannel(url, null, null);
+            channel.QueryInterface(Ci.nsIUploadChannel).setUploadStream(is, "application/json", json.length);
+            channel.QueryInterface(Ci.nsIHttpChannel).requestMethod = "PUT";
+            let uriloader = Cc["@mozilla.org/uriloader;1"].getService(Ci.nsIURILoader);
+            uriloader.openURI(channel, false, docShell);
+          } catch(e) {
+            Cu.reportError(e);
+          }
+        }
+        else {
+          let webapp = Cc["@mozilla.org/webapps/installer;1"].getService(Ci.nsIWebappsSupport);
+          webapp.installApplication(aTitle, aURI, aIcon, data);
+          if (WebappsUI._manifest.successCallback)
+            WebappsUI._manifest.successCallback(WebappsUI._manifest);
+        }
       }
       catch(e) {
         if (WebappsUI._manifest.errorCallback) {
