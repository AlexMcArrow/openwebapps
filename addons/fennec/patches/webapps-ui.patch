# HG changeset patch
# Parent 794c73cbfca6b62cfdbb20e82eb91cc15b30ad8b
# User Fabrice Desr√© <fabrice@mozilla.com>

Bug 584767 - webapps frontend

diff --git a/mobile/chrome/content/browser-scripts.js b/mobile/chrome/content/browser-scripts.js
--- a/mobile/chrome/content/browser-scripts.js
+++ b/mobile/chrome/content/browser-scripts.js
@@ -69,6 +69,7 @@
 
 [
   ["FullScreenVideo"],
+  ["WebappsUI"],
   ["BadgeHandlers"],
   ["ContextHelper"],
   ["FormHelperUI"],
diff --git a/mobile/chrome/content/browser-ui.js b/mobile/chrome/content/browser-ui.js
--- a/mobile/chrome/content/browser-ui.js
+++ b/mobile/chrome/content/browser-ui.js
@@ -133,6 +133,9 @@
       this._title.value = this._title.getAttribute("placeholder");
       this._title.classList.add("placeholder");
     }
+
+    if (document.getElementById("main-window").hasAttribute("webapp"))
+      window.document.title = caption;
   },
 
   /*
@@ -588,6 +591,33 @@
     ConsoleView.uninit();
   },
 
+  // Switching to Web App mode, by:
+  // - hide some the URL bar
+  // - deactivate some commands
+  // - remove "Open in new tab" from the context menu
+  enterAppMode: function(uri) {
+    document.getElementById("main-window").setAttribute("webapp", uri);
+    document.getElementById("toolbar-container").style.display = "none";
+
+#ifdef MOZ_PLATFORM_MAEMO
+    document.getElementById("main-window").setAttribute("sizemode", "maximized");
+#endif
+
+    document.getElementById("tabs-container").style.display = "none";
+    document.getElementById("browser-controls").parentNode.style.display = "none";
+
+    document.getElementById("cmd_forceReload").setAttribute("disabled", "true");
+    document.getElementById("cmd_reload").setAttribute("disabled", "true");
+    document.getElementById("cmd_newTab").setAttribute("disabled", "true");
+    document.getElementById("cmd_back").setAttribute("disabled", "true");
+    document.getElementById("cmd_forward").setAttribute("disabled", "true");
+    document.getElementById("cmd_openLocation").setAttribute("disabled", "true");
+    document.getElementById("cmd_menu").setAttribute("disabled", "true");
+
+    let tabMenu = document.getElementById("context-openinnewtab");
+    tabMenu.parentNode.removeChild(tabMenu);
+  },
+  
   update: function(aState) {
     let browser = Browser.selectedBrowser;
 
@@ -1020,6 +1050,20 @@
         return this._domWindowClose(browser);
         break;
       case "DOMLinkAdded":
+        // checks for an icon to use for a web app
+        // priority is : icon < apple-touch-icon
+        let rel = json.rel.toLowerCase().split(" ");
+        if ((rel.indexOf("icon") != -1) && !browser.appIcon) {
+          // We should also use the sizes attribute if available
+          // see http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#rel-icon
+          browser.appIcon = json.href;
+        }
+        else if (rel.indexOf("apple-touch-icon") != -1) {
+          // XXX should we support apple-touch-icon-precomposed ?
+          // see http://developer.apple.com/safari/library/documentation/appleapplications/reference/safariwebcontent/configuringwebapplications/configuringwebapplications.html
+          browser.appIcon = json.href;
+        }
+ 
         if (Browser.selectedBrowser == browser)
           this._updateIcon(Browser.selectedBrowser.mIconURL);
         break;
@@ -1222,7 +1266,9 @@
         }
         break;
       case "cmd_quit":
-        GlobalOverlay.goQuitApplication();
+        //GlobalOverlay.goQuitApplication();
+        // only close one window
+        this._closeOrQuit();
         break;
       case "cmd_close":
         this._closeOrQuit();
diff --git a/mobile/chrome/content/browser.js b/mobile/chrome/content/browser.js
--- a/mobile/chrome/content/browser.js
+++ b/mobile/chrome/content/browser.js
@@ -333,8 +333,16 @@
     // page as an argument. commandURL _should_ never be empty, but we protect against it
     // below. However, we delay trying to get the fallback homepage until we really need it.
     let commandURL = null;
-    if (window.arguments && window.arguments[0])
-      commandURL = window.arguments[0];
+    let isWebapp = false;
+    if (window.arguments && window.arguments[0]) {
+       commandURL = window.arguments[0];
+      
+      // check if the second argument is "webapp"
+      if ((window.arguments.length > 1) && (window.arguments[1] == "webapp")) {
+        BrowserUI.enterAppMode(commandURL);
+        isWebapp = true;
+      }
+    }
 
     // Should we restore the previous session (crash or some other event)
     let ss = Cc["@mozilla.org/browser/sessionstore;1"].getService(Ci.nsISessionStore);
@@ -363,6 +371,14 @@
       this.addTab(commandURL || this.getHomePage(), true);
     }
 
+#ifdef ANDROID
+    // workaround Bug 610834. Need to resize any new window
+    let winEnum = Services.wm.getEnumerator("navigator:browser");
+    winEnum.getNext();
+    if (winEnum.hasMoreElements())
+      resizeHandler({ target: window });
+#endif
+
     messageManager.addMessageListener("Browser:ViewportMetadata", this);
     messageManager.addMessageListener("Browser:CanCaptureMouse:Return", this);
     messageManager.addMessageListener("Browser:FormSubmit", this);
@@ -1466,6 +1482,8 @@
         if (tab == Browser.selectedTab)
           BrowserUI.updateURI();
 
+        tab.browser.appIcon = null;
+
         let locationHasChanged = (location != tab.browser.lastLocation);
         if (locationHasChanged) {
           Browser.getNotificationBox(tab.browser).removeTransientNotifications();
diff --git a/mobile/chrome/content/browser.xul b/mobile/chrome/content/browser.xul
--- a/mobile/chrome/content/browser.xul
+++ b/mobile/chrome/content/browser.xul
@@ -68,10 +68,9 @@
         title="&brandShortName;"
 #ifdef MOZ_PLATFORM_MAEMO
         sizemode="fullscreen"
-#else
+#endif
         width="480"
         height="800"
-#endif
         onkeypress="onDebugKeyPress(event);"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:html="http://www.w3.org/1999/xhtml">
@@ -347,6 +346,7 @@
           onclick="PageActions.clearPagePermissions(event);"/>
         <pageaction id="pageaction-search" title="&pageactions.search.addNew;"/>
         <pageaction id="pageaction-charset" title="&pageactions.charEncoding;" onclick="CharsetMenu.show();"/>
+	<pageaction id="pageaction-webapps-install" title="&pageactions.webapps.install;"/>
       </hbox>
     </arrowbox>
 
diff --git a/mobile/chrome/content/common-ui.js b/mobile/chrome/content/common-ui.js
--- a/mobile/chrome/content/common-ui.js
+++ b/mobile/chrome/content/common-ui.js
@@ -174,6 +174,7 @@
 #endif
     this.register("pageaction-share", this.updateShare, this);
     this.register("pageaction-search", BrowserSearch.updatePageSearchEngines, BrowserSearch);
+    this.register("pageaction-webapps-install", WebappsUI.updateWebappsInstall, this);
   },
 
   handleEvent: function handleEvent(aEvent) {
@@ -1177,6 +1178,120 @@
   }
 };
 
+var WebappsUI = {
+  _dialog: null,
+  _manifest: null,
+
+  show: function show(aManifest) {
+    this._manifest = aManifest;
+    this._dialog = importDialog(window, "chrome://browser/content/webapps.xul", null);
+
+    if (aManifest.name) {
+      document.getElementById("webapps-title").value = aManifest.name;
+    }
+    else {
+      document.getElementById("webapps-title-box").hidden = true;
+      document.getElementById("webapps-perm-box").className = "prompt-header";
+    }
+
+    if (aManifest.icon) {
+      document.getElementById("webapps-icon").src = aManifest.icon;  
+    }
+
+    let uri = Services.io.newURI(aManifest.uri, null, null);
+    document.getElementById("webapps-offline-checkbox").checked = Services.perms.testExactPermission(uri, "offline-app") == Ci.nsIPermissionManager.ALLOW_ACTION;
+    document.getElementById("webapps-geoloc-checkbox").checked = Services.perms.testExactPermission(uri, "geo") == Ci.nsIPermissionManager.ALLOW_ACTION;
+    document.getElementById("webapps-notifications-checkbox").checked = Services.perms.testExactPermission(uri, "desktop-notification") == Ci.nsIPermissionManager.ALLOW_ACTION;
+    BrowserUI.pushPopup(this, this._dialog);
+    this._dialog.waitForClose();
+  },
+
+  hide: function hide() {
+    this._dialog.close();
+    this._dialog = null;
+    BrowserUI.popPopup(this);
+  },
+
+  _updatePermission: function updatePermission(aId, aPerm) {
+    try {
+      let uri = Services.io.newURI(this._manifest.uri, null, null);
+      Services.perms.add(uri, aPerm, document.getElementById(aId).checked ? Ci.nsIPermissionManager.ALLOW_ACTION : Ci.nsIPermissionManager.DENY_ACTION);
+    } catch(e) {
+      Cu.reportError(e);
+    }
+  },
+  
+  defaultError: function(aManifest) {
+    Services.prompt.alert(window, aManifest.name, aManifest.errorMessage)
+  },
+
+  launch: function launch() {
+    this._updatePermission("webapps-offline-checkbox", "offline-app");
+    this._updatePermission("webapps-geoloc-checkbox", "geo");
+    this._updatePermission("webapps-notifications-checkbox", "desktop-notification");
+    let title = document.getElementById("webapps-title").value;
+    this.hide();
+    if (this._manifest.icon)
+      this.install(this._manifest.uri, title, this._manifest.icon);
+  },
+  
+  updateWebappsInstall: function updateWebappsInstall(aNode) {
+    if (document.getElementById("main-window").hasAttribute("webapp"))
+      return false;
+    let browser = Browser.selectedBrowser;
+    aNode.onclick = function(event) {
+      // tries every way to get an icon.
+      let icon = browser.appIcon;
+      if (!icon)
+        icon = Browser.selectedBrowser.mIconURL;
+      if (!icon) 
+        icon = gFaviconService.getFaviconImageForPage(browser.currentURI).spec;
+      WebappsUI.show({ uri: browser.currentURI.spec,
+                       name: browser.contentTitle,
+                       icon: icon,
+                       errorCallback: WebappsUI.defaultError});
+    }
+    return true;
+  },
+  
+  install: function(aURI, aTitle, aIcon) {
+    Cu.import("resource://gre/modules/Services.jsm");
+    const kIconSize = 64;
+    
+    let win = Services.wm.getMostRecentWindow("navigator:browser");
+    let canvas = win.document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
+    canvas.setAttribute("style", "display: none");
+    canvas = win.document.getElementById("main-window").appendChild(canvas);
+    let self = this;
+    let image = new win.Image();
+    image.onload = function() {
+      canvas.width = canvas.height = kIconSize; // clears the canvas
+      let ctx = canvas.getContext("2d");
+      ctx.drawImage(image, 0, 0, kIconSize, kIconSize);
+      let data = canvas.toDataURL("image/png", "");
+      canvas.parentNode.removeChild(canvas);
+      canvas = null;
+      try {
+        let webapp = Cc["@mozilla.org/webapps/installer;1"].getService(Ci.nsIWebappsSupport);
+        webapp.installApplication(aTitle, aURI, aIcon, data);
+        if (WebappsUI._manifest.successCallback)
+          WebappsUI._manifest.successCallback(WebappsUI._manifest);
+      }
+      catch(e) {
+        if (WebappsUI._manifest.errorCallback) {
+          WebappsUI._manifest.errorMessage = e.toString();
+          WebappsUI._manifest.errorCallback(WebappsUI._manifest);
+        }
+      }
+    }
+    image.onerror = function() {
+      // can't load the icon (bad URI) : fallback to the default one from chrome
+      self.install(aURI, aTitle, "chrome://browser/skin/images/favicon-default-30.png");
+    }
+    image.src = aIcon;
+  }
+};
+
 var BadgeHandlers = {
   _handlers: [
     {
diff --git a/mobile/chrome/content/webapps.xul b/mobile/chrome/content/webapps.xul
new file mode 100644
--- /dev/null
+++ b/mobile/chrome/content/webapps.xul
@@ -0,0 +1,86 @@
+<?xml version="1.0"?>
+<!-- ***** BEGIN LICENSE BLOCK *****
+   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
+   -
+   - The contents of this file are subject to the Mozilla Public License Version
+   - 1.1 (the "License"); you may not use this file except in compliance with
+   - the License. You may obtain a copy of the License at
+   - http://www.mozilla.org/MPL/
+   -
+   - Software distributed under the License is distributed on an "AS IS" basis,
+   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+   - for the specific language governing rights and limitations under the
+   - License.
+   -
+   - The Original Code is Mozilla Mobile Browser.
+   -
+   - The Initial Developer of the Original Code is
+   - Mozilla Corporation.
+   - Portions created by the Initial Developer are Copyright (C) 2008
+   - the Initial Developer. All Rights Reserved.
+   -
+   - Contributor(s):
+   -   Fabrice Desr√© <fabrice@mozilla.com>
+   -
+   - Alternatively, the contents of this file may be used under the terms of
+   - either the GNU General Public License Version 2 or later (the "GPL"), or
+   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+   - in which case the provisions of the GPL or the LGPL are applicable instead
+   - of those above. If you wish to allow use of your version of this file only
+   - under the terms of either the GPL or the LGPL, and not to allow others to
+   - use your version of this file under the terms of the MPL, indicate your
+   - decision by deleting the provisions above and replace them with the notice
+   - and other provisions required by the LGPL or the GPL. If you do not delete
+   - the provisions above, a recipient may use your version of this file under
+   - the terms of any one of the MPL, the GPL or the LGPL.
+   -
+   - ***** END LICENSE BLOCK ***** -->
+<!DOCTYPE window [
+<!ENTITY % promptDTD SYSTEM "chrome://browser/locale/prompt.dtd">
+%promptDTD;
+<!ENTITY % webappsDTD SYSTEM "chrome://browser/locale/webapps.dtd">
+%webappsDTD;
+]>
+<dialog id="webapp-dialog"
+  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+
+  <keyset>
+    <key keycode="VK_ESCAPE" command="cmd_cancel"/>
+    <key keycode="VK_RETURN" command="cmd_ok"/>
+  </keyset>
+
+  <commandset>
+    <command id="cmd_cancel" oncommand="WebappsUI.hide();"/>
+    <command id="cmd_ok" oncommand="WebappsUI.launch();"/>
+  </commandset>
+
+  <vbox class="prompt-header" id="webapps-title-box">
+    <hbox align="center">
+      <image id="webapps-icon" width="48" height="48"/>
+      <vbox flex="1">
+        <label crop="center" flex="1" value="&webapps.title;"/>
+        <textbox id="webapps-title" flex="1"/>
+      </vbox>
+    </hbox>
+  </vbox>
+  <vbox class="prompt-section prompt-header" id="webapps-perm-box">
+    <label crop="center" flex="1" value="&webapps.permissions;"/>
+    <button id="webapps-geoloc-checkbox" type="checkbox" class="button-checkbox" flex="1">
+      <image class="button-image-icon"/>
+      <description class="prompt-checkbox-label" flex="1">&webapps.perm.geolocation;</description>
+    </button>
+    <button id="webapps-offline-checkbox" type="checkbox" class="button-checkbox" flex="1">
+      <image class="button-image-icon"/>
+      <description class="prompt-checkbox-label" flex="1">&webapps.perm.offline;</description>
+    </button>
+    <button id="webapps-notifications-checkbox" type="checkbox" class="button-checkbox" flex="1">
+      <image class="button-image-icon"/>
+      <description class="prompt-checkbox-label" flex="1">&webapps.perm.notifications;</description>
+    </button>
+  </vbox>
+  <hbox class="prompt-buttons">
+    <button class="prompt-button" command="cmd_ok" label="&ok.label;"/>
+    <button class="prompt-button" command="cmd_cancel" label="&cancel.label;"/>
+  </hbox>
+</dialog>
+
diff --git a/mobile/chrome/jar.mn b/mobile/chrome/jar.mn
--- a/mobile/chrome/jar.mn
+++ b/mobile/chrome/jar.mn
@@ -71,6 +71,7 @@
   content/prompt/select.xul            (content/prompt/select.xul)
   content/prompt/prompt.js             (content/prompt/prompt.js)
   content/share.xul                    (content/share.xul)
+  content/webapps.xul                  (content/webapps.xul)
   content/AnimatedZoom.js              (content/AnimatedZoom.js)
 #ifdef MOZ_SERVICES_SYNC
   content/sync.js                      (content/sync.js)
diff --git a/mobile/components/BrowserCLH.js b/mobile/components/BrowserCLH.js
--- a/mobile/components/BrowserCLH.js
+++ b/mobile/components/BrowserCLH.js
@@ -44,12 +44,12 @@
 
 function openWindow(aParent, aURL, aTarget, aFeatures, aArgs) {
   let argString = null;
-  if (aArgs) {
+  if (aArgs && !(aArgs instanceof Ci.nsISupportsArray)) {
     argString = Cc["@mozilla.org/supports-string;1"].createInstance(Ci.nsISupportsString);
     argString.data = aArgs;
   }
 
-  return Services.ww.openWindow(aParent, aURL, aTarget, aFeatures, argString);
+  return Services.ww.openWindow(aParent, aURL, aTarget, aFeatures, argString || aArgs);
 }
 
 function resolveURIInternal(aCmdLine, aArgument) {
@@ -187,10 +187,34 @@
     }
 
     // Open the main browser window, if we don't already have one
+    // retrieve the webapp param, if any
+    let app = aCmdLine.handleFlagWithParam("webapp", false);
+    let appURI;
+    if (app)
+      appURI = resolveURIInternal(aCmdLine, app).spec;
+
     let win;
+    
+    // only allow a single instance for a web app, and checks if a classic browser is opened
+    let apps = Services.wm.getEnumerator("navigator:browser");
+    while (apps.hasMoreElements()) {
+      let appWin = apps.getNext().QueryInterface(Ci.nsIDOMWindowInternal);
+      let root = appWin.document.getElementById("main-window");
+      if (!root.hasAttribute("webapp")) {
+        win = appWin;
+      }
+      else if (app && (root.getAttribute("webapp") == appURI)) {
+        appWin.focus();
+        aCmdLine.preventDefault = true;
+        return;
+      }
+    }
+
+    // Open the main browser window, if :
+    // - we don't already have one non-webapp one
+    // - we are a webapp
     try {
-      win = Services.wm.getMostRecentWindow("navigator:browser");
-      if (!win) {
+      if (!win || app) {
         // Default to the saved homepage
         let defaultURL = getHomePage();
 
@@ -204,7 +228,19 @@
           uris = uris.slice(1);
         }
 
-        win = openWindow(null, "chrome://browser/content/browser.xul", "_blank", "chrome,dialog=no,all", defaultURL);
+        if (app) {
+           let args = Cc["@mozilla.org/supports-array;1"].createInstance(Ci.nsISupportsArray);
+           let arg = Cc["@mozilla.org/supports-string;1"].createInstance(Ci.nsISupportsString);
+           arg.data = appURI;
+           args.AppendElement(arg);
+           arg = Cc["@mozilla.org/supports-string;1"].createInstance(Ci.nsISupportsString);
+           arg.data = "webapp";
+           args.AppendElement(arg);
+           win = openWindow(null, "chrome://browser/content/browser.xul", "_blank", "chrome,dialog=no,all", args);
+        }
+        else {
+          win = openWindow(null, "chrome://browser/content/browser.xul", "_blank", "chrome,dialog=no,all", defaultURL);
+        }
       }
 
       win.focus();
diff --git a/mobile/installer/package-manifest.in b/mobile/installer/package-manifest.in
--- a/mobile/installer/package-manifest.in
+++ b/mobile/installer/package-manifest.in
@@ -276,6 +276,7 @@
 @BINPATH@/components/xuldoc.xpt
 @BINPATH@/components/xultmpl.xpt
 @BINPATH@/components/zipwriter.xpt
+@BINPATH@/components/webapps.xpt
 
 ; JavaScript components
 @BINPATH@/components/ConsoleAPI.manifest
diff --git a/mobile/locales/en-US/chrome/browser.dtd b/mobile/locales/en-US/chrome/browser.dtd
--- a/mobile/locales/en-US/chrome/browser.dtd
+++ b/mobile/locales/en-US/chrome/browser.dtd
@@ -110,5 +110,6 @@
 <!ENTITY pageactions.findInPage      "Find In Page">
 <!ENTITY pageactions.search.addNew   "Add Search Engine">
 <!ENTITY pageactions.charEncoding    "Character Encoding">
+<!ENTITY pageactions.webapps.install "Install as App">
 
 <!ENTITY appMenu.siteOptions         "Site Options">
diff --git a/mobile/locales/en-US/chrome/webapps.dtd b/mobile/locales/en-US/chrome/webapps.dtd
new file mode 100644
--- /dev/null
+++ b/mobile/locales/en-US/chrome/webapps.dtd
@@ -0,0 +1,5 @@
+<!ENTITY webapps.title "Application Name">
+<!ENTITY webapps.permissions "Allow app access to">
+<!ENTITY webapps.perm.geolocation "Location-aware browsing">
+<!ENTITY webapps.perm.offline "Offline data storage">
+<!ENTITY webapps.perm.notifications "Desktop notifications">
diff --git a/mobile/locales/jar.mn b/mobile/locales/jar.mn
--- a/mobile/locales/jar.mn
+++ b/mobile/locales/jar.mn
@@ -16,6 +16,7 @@
   locale/@AB_CD@/browser/sync.dtd                 (%chrome/sync.dtd)
   locale/@AB_CD@/browser/sync.properties          (%chrome/sync.properties)
   locale/@AB_CD@/browser/prompt.dtd               (%chrome/prompt.dtd)
+  locale/@AB_CD@/browser/webapps.dtd              (%chrome/webapps.dtd)
   locale/@AB_CD@/browser/feedback.dtd             (%chrome/feedback.dtd)
   locale/@AB_CD@/browser/phishing.dtd             (%chrome/phishing.dtd)
   locale/@AB_CD@/browser/bookmarks.json           (bookmarks.json)
diff --git a/mobile/themes/core/platform.css b/mobile/themes/core/platform.css
--- a/mobile/themes/core/platform.css
+++ b/mobile/themes/core/platform.css
@@ -139,6 +139,10 @@
   margin-left: @margin_large@;
 }
 
+dialog > .prompt-section {
+  -moz-border-radius: 0;
+}
+
 /* buttons ----------------------------------------------------------------- */
 .button-text,
 .toolbarbutton-text {
