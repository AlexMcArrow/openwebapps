# HG changeset patch
# User Fabrice Desré <fabrice@mozilla.com>
# Parent 8472fbcf56c511d430155d8ddf669effcf301e40
Add a splash screen at the start of webapps

diff --git a/mobile/chrome/content/browser-ui.js b/mobile/chrome/content/browser-ui.js
--- a/mobile/chrome/content/browser-ui.js
+++ b/mobile/chrome/content/browser-ui.js
@@ -495,6 +495,8 @@ var BrowserUI = {
       return IndexedDB.receiveMessage(aMessage);
     });
 
+    WebappsUI.init();
+  
     // Delay the panel UI and Sync initialization.
     window.addEventListener("UIReadyDelayed", function(aEvent) {
       window.removeEventListener(aEvent.type, arguments.callee, false);
@@ -536,7 +538,6 @@ var BrowserUI = {
       FullScreenVideo.init();
       NewTabPopup.init();
       CharsetMenu.init();
-      WebappsUI.init();
 
       // If some add-ons were disabled during during an application update, alert user
       if (Services.prefs.prefHasUserValue("extensions.disabledAddons")) {
@@ -617,6 +618,19 @@ var BrowserUI = {
 
     let tabMenu = document.getElementById("context-openinnewtab");
     tabMenu.parentNode.removeChild(tabMenu);
+
+    try {
+      let first = true;
+    dump("XxXxX init screenshot for " + uri + "\n"); 
+     setInterval(function() {
+      dump("XxXxX taking screenshot for " + uri + "\n");
+      if (!first)
+        WebappsUI._saveScreenshot(uri);
+      first = false;
+    }, 10000);
+    } catch(e) {
+      dump("XxXxX error : " + e + "\n");
+    }
   },
   
   update: function(aState) {
diff --git a/mobile/chrome/content/browser.js b/mobile/chrome/content/browser.js
--- a/mobile/chrome/content/browser.js
+++ b/mobile/chrome/content/browser.js
@@ -340,6 +340,7 @@ var Browser = {
       // check if the second argument is "webapp"
       if ((window.arguments.length > 1) && (window.arguments[1] == "webapp")) {
         BrowserUI.enterAppMode(commandURL);
+        commandURL = "webapp:" + commandURL;
         isWebapp = true;
       }
     }
diff --git a/mobile/chrome/content/common-ui.js b/mobile/chrome/content/common-ui.js
--- a/mobile/chrome/content/common-ui.js
+++ b/mobile/chrome/content/common-ui.js
@@ -1324,6 +1324,7 @@ var WebappsUI = {
     this.messageManager.addMessageListener("OpenWebapp:Install", this);
     this.messageManager.addMessageListener("OpenWebapp:GetLocale", this);
     this.messageManager.addMessageListener("OpenWebapp:IsInstalled", this);
+    this.messageManager.addMessageListener("WebappBgProtocol:GetProfD", this);
   },
   
   receiveMessage: function(aMessage) {
@@ -1348,6 +1349,10 @@ var WebappsUI = {
         let webapp = Cc["@mozilla.org/webapps/installer;1"].getService(Ci.nsIWebappsSupport);
         return  { installed: webapp.isApplicationInstalled(aMessage.json.uri) };
         break;
+      case "WebappBgProtocol:GetProfD":
+        let dir =  Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties).get("ProfD", Ci.nsIFile);
+        return { path: dir.path };
+        break;
     }
   },
   
@@ -1456,19 +1461,72 @@ var WebappsUI = {
     }
     return true;
   },
+ 
+  _safeName: function(aString) {
+    let safeName = "";
+    for (let i = 0; i < aString.length; i++) {
+      let c = aString[i];
+      if (((c >= 'a') && (c <= 'z')) ||
+         ((c >= 'A') && (c <= 'Z')) ||
+         (c == '-') || (c == '+') || (c == '.') || (c == '_'))
+        safeName += c;
+      else
+        safeName += "_" + aString.charCodeAt(i) + "_";
+    }
+    return safeName;
+  },
   
-  install: function(aURI, aTitle, aIcon, aIntent) {
-    Cu.import("resource://gre/modules/Services.jsm");
-    const kIconSize = 64;
-    
+  _saveScreenshot: function(aURI) {
+    let dir =  Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties).get("ProfD", Ci.nsIFile);
+    dir.append("webapp");
+    if (!dir.exists()) {
+      dir.create(Ci.nsIFile.DIRECTORY_TYPE, 0755);
+    }
+    dir.append(this._safeName(aURI) + ".png");
+    let browser = Browser.selectedBrowser;
+    let screenshot = this._createCanvas(browser.contentWindowWidth, browser.contentWindowHeight);
+    let renderer = rendererFactory(browser, screenshot);
+    renderer.drawContent(function(ctx, callback) {
+      ctx.save();
+      ctx.clearRect(0, 0, browser.contentWindowWidth, browser.contentWindowHeight);
+      callback(browser, 0, 0, browser.contentWindowWidth, browser.contentWindowHeight, "white");
+      ctx.restore();
+      // need to use a timeout here because of Bug 619591
+    setTimeout(function() {
+    let wbp = Cc['@mozilla.org/embedding/browser/nsWebBrowserPersist;1'].createInstance(Ci.nsIWebBrowserPersist);
+    wbp.persistFlags = Ci.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES | Ci.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
+    let ios = Cc['@mozilla.org/network/io-service;1'].getService(Ci.nsIIOService);
+    wbp.saveURI(ios.newURI(screenshot.toDataURL("image/png", ""), "UTF8", null), null, null, null, null, dir);
+    screenshot.parentNode.removeChild(screenshot);
+    screenshot = null;
+    }, 2000);
+    });
+  },
+  
+  _createCanvas: function(width, height) {
     let win = Services.wm.getMostRecentWindow("navigator:browser");
     let canvas = win.document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
     canvas.setAttribute("style", "display: none");
     canvas = win.document.getElementById("main-window").appendChild(canvas);
+    canvas.width = width;
+    canvas.height = height;
+    return canvas;
+  },
+
+  install: function(aURI, aTitle, aIcon, aIntent) {
+    Cu.import("resource://gre/modules/Services.jsm");
+    const kIconSize = 64;
+
+    let canvas = this._createCanvas(kIconSize, kIconSize);
     let self = this;
+    let win = Services.wm.getMostRecentWindow("navigator:browser");
     let image = new win.Image();
     image.onload = function() {
-      canvas.width = canvas.height = kIconSize; // clears the canvas
+      try {
+        self._saveScreenshot(aURI);
+      } catch(e) {
+        dump("XxXxX saveScreenshot : " + e + "\n");
+      }
       let ctx = canvas.getContext("2d");
       ctx.drawImage(image, 0, 0, kIconSize, kIconSize);
       let data = canvas.toDataURL("image/png", "");
diff --git a/mobile/chrome/content/webappsplash.xhtml b/mobile/chrome/content/webappsplash.xhtml
new file mode 100644
--- /dev/null
+++ b/mobile/chrome/content/webappsplash.xhtml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html [
+  <!ENTITY % htmlDTD PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
+  %htmlDTD;
+]>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <title>Launching Application</title>
+</head>
+<body id="body">
+</body>
+<script type="application/javascript">
+  var body = document.getElementById("body");
+  var uri = decodeURIComponent(document.location.href.substring(7));
+  body.style.backgroundPosition = "center center";
+  body.style.backgroundRepeat = "no-repeat";
+  body.style.backgroundImage = "-moz-linear-gradient(top, rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('webappbg:" + uri + "')";
+  window.location = uri;
+</script>
+</html>
diff --git a/mobile/chrome/jar.mn b/mobile/chrome/jar.mn
--- a/mobile/chrome/jar.mn
+++ b/mobile/chrome/jar.mn
@@ -78,5 +78,6 @@ chrome.jar:
   content/LoginManagerChild.js         (content/LoginManagerChild.js)
   content/fullscreen-video.js          (content/fullscreen-video.js)
   content/fullscreen-video.xhtml       (content/fullscreen-video.xhtml)
+  content/webappsplash.xhtml           (content/webappsplash.xhtml)
   
 % override chrome://global/content/config.xul chrome://browser/content/config.xul
diff --git a/mobile/components/MobileComponents.manifest b/mobile/components/MobileComponents.manifest
--- a/mobile/components/MobileComponents.manifest
+++ b/mobile/components/MobileComponents.manifest
@@ -121,4 +121,12 @@ category app-startup SafeBrowsing servic
 # UpdatePrompt.js
 component {88b3eb21-d072-4e3b-886d-f89d8c49fe59} UpdatePrompt.js
 contract @mozilla.org/updates/update-prompt;1 {88b3eb21-d072-4e3b-886d-f89d8c49fe59}
+
+# WebappProtocol.js
+component {afde5e56-e7c8-4419-83c2-026e66e2bc7f} WebappProtocol.js
+contract @mozilla.org/network/protocol;1?name=webapp {afde5e56-e7c8-4419-83c2-026e66e2bc7f}
+
+# WebappBgProtocol.js
+component {83437c0d-28dc-4c24-af2c-55474b915a97} WebappBgProtocol.js
+contract @mozilla.org/network/protocol;1?name=webappbg {83437c0d-28dc-4c24-af2c-55474b915a97}
 #endif
diff --git a/mobile/components/webapps/Makefile.in b/mobile/components/webapps/Makefile.in
--- a/mobile/components/webapps/Makefile.in
+++ b/mobile/components/webapps/Makefile.in
@@ -50,6 +50,8 @@ ifndef ANDROID
 EXTRA_COMPONENTS += \
                 WebappsMaemo.js \
                 OpenWebapps.js \
+		WebappProtocol.js \
+		WebappBgProtocol.js \
                 $(NULL)
 endif
 
diff --git a/mobile/components/webapps/WebappBgProtocol.js b/mobile/components/webapps/WebappBgProtocol.js
new file mode 100644
--- /dev/null
+++ b/mobile/components/webapps/WebappBgProtocol.js
@@ -0,0 +1,101 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Webapp Background Protocol
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/NetUtil.jsm");
+
+function WebappBgProtocol() {
+  this._messageManager = Cc["@mozilla.org/childprocessmessagemanager;1"].getService(Ci.nsISyncMessageSender);
+}
+
+WebappBgProtocol.prototype = {
+  classID: Components.ID("{83437c0d-28dc-4c24-af2c-55474b915a97}"),
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIProtocolHandler]),
+
+  scheme: "webappbg",
+  defaultPort: -1,
+  protocolFlags2: Ci.nsIProtocolHandler.URI_NORELATIVE | Ci.nsIProtocolHandler.URI_LOADABLE_BY_ANYONE |
+                 Ci.nsIProtocolHandler.URI_INHERITS_SECURITY_CONTEXT | Ci.nsIProtocolHandler.URI_NOAUTH,
+  protocolFlags: Ci.nsIProtocolHandler.URI_STD | Ci.nsIProtocolHandler.URI_IS_UI_RESOURCE | Ci.nsIProtocolHandler.URI_IS_LOCAL_RESOURCE,
+  
+  newURI: function(aSpec, aOriginCharset, aBaseURI) {
+    let uri = Cc["@mozilla.org/network/simple-uri;1"].createInstance(Ci.nsIURI);
+    uri.spec = aSpec;
+    return uri;
+  },
+  
+  _safeName: function(aString) {
+    let safeName = "";
+    for (let i = 0; i < aString.length; i++) {
+      let c = aString[i];
+      if (((c >= 'a') && (c <= 'z')) ||
+         ((c >= 'A') && (c <= 'Z')) ||
+         (c == '-') || (c == '+') || (c == '.') || (c == '_'))
+        safeName += c;
+      else
+        safeName += "_" + aString.charCodeAt(i) + "_";
+    }
+    return safeName;
+  },
+  
+  newChannel: function(aURI) {
+    dump("XxXxX WebappBgProtocol::newChannel()\n");
+    let dest = this._safeName(aURI.spec.substring(9));
+    let profd = this._messageManager.sendSyncMessage("WebappBgProtocol:GetProfD", { });
+    dump("\t" + profd[0].path + "\n");
+    let dir = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);  
+    dir.initWithPath(profd[0].path);
+    dir.append("webapp");
+    dir.append(dest + ".png");
+    if (dir.exists()) {
+      dump("\tfile://" + dir.path + "\n");
+      return NetUtil.newChannel("file://" + dir.path);
+    }
+    return NetUtil.newChannel("chrome://browser/skin/images/throbber.png");
+  },
+  
+  allowPort : function(port, scheme) {
+    return false;
+  }
+ 
+};
+
+const NSGetFactory = XPCOMUtils.generateNSGetFactory([WebappBgProtocol]);
diff --git a/mobile/components/webapps/WebappProtocol.js b/mobile/components/webapps/WebappProtocol.js
new file mode 100644
--- /dev/null
+++ b/mobile/components/webapps/WebappProtocol.js
@@ -0,0 +1,77 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Webapp Protocol
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2009
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/NetUtil.jsm");
+
+function WebappProtocol() {
+}
+
+WebappProtocol.prototype = {
+  classID: Components.ID("{afde5e56-e7c8-4419-83c2-026e66e2bc7f}"),
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIProtocolHandler]),
+
+  scheme: "webapp",
+  defaultPort: -1,
+  protocolFlags2: Ci.nsIProtocolHandler.URI_NORELATIVE | Ci.nsIProtocolHandler.URI_LOADABLE_BY_ANYONE |
+                 Ci.nsIProtocolHandler.URI_INHERITS_SECURITY_CONTEXT | Ci.nsIProtocolHandler.URI_NOAUTH,
+  protocolFlags: Ci.nsIProtocolHandler.URI_STD | Ci.nsIProtocolHandler.URI_IS_UI_RESOURCE | Ci.nsIProtocolHandler.URI_IS_LOCAL_RESOURCE,
+  
+  newURI: function(aSpec, aOriginCharset, aBaseURI) {
+    let uri = Cc["@mozilla.org/network/simple-uri;1"].createInstance(Ci.nsIURI);
+    uri.spec = aSpec;
+    return uri;
+  },
+  
+  newChannel: function(aURI) {
+    dump("XxXxX WebappProtocol::newChannel()\n");
+    let chan = NetUtil.newChannel("chrome://browser/content/webappsplash.xhtml?" + encodeURIComponent(aURI.spec));
+    //chan.originalURI = aURI;
+    return chan;
+  },
+  
+  allowPort : function(port, scheme) {
+    return false;
+  }
+ 
+};
+
+const NSGetFactory = XPCOMUtils.generateNSGetFactory([WebappProtocol]);
diff --git a/mobile/installer/package-manifest.in b/mobile/installer/package-manifest.in
--- a/mobile/installer/package-manifest.in
+++ b/mobile/installer/package-manifest.in
@@ -614,6 +614,8 @@ bin/components/@DLL_PREFIX@nkgnomevfs@DL
 #ifdef MOZ_SAFE_BROWSING
 @BINPATH@/components/SafeBrowsing.js
 #endif
+@BINPATH@/components/WebappProtocol.js
+@BINPATH@/components/WebappBgProtocol.js
 #ifdef MOZ_UPDATER
 @BINPATH@/components/UpdatePrompt.js
 #endif
