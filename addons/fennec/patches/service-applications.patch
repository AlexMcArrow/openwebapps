# HG changeset patch
# User Fabrice Desré <fabrice@mozilla.com>
# Parent 082502f7acbc8212e98a5438a5780322dc64f25f
Implements native application listing & launching

diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -476,6 +476,11 @@
 #include "nsIDOMNavigatorOpenWebapp.h"
 
 #include "nsIDOMNavigatorServices.h"
+#include "nsIDOMPendingOp.h"
+
+#ifdef ANDROID
+#include "nsIDOMApplication.h"
+#endif
 
 // Simple gestures include
 #include "nsIDOMSimpleGestureEvent.h"
@@ -1359,6 +1364,15 @@ static nsDOMClassInfoData sClassInfoData
   
   NS_DEFINE_CLASSINFO_DATA(NavigatorServiceHandler, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
+  NS_DEFINE_CLASSINFO_DATA(PendingOp, nsDOMGenericSH,
+                           DOM_DEFAULT_SCRIPTABLE_FLAGS)
+#ifdef ANDROID
+  NS_DEFINE_CLASSINFO_DATA(ServiceApplicationManager, nsDOMGenericSH,
+                           DOM_DEFAULT_SCRIPTABLE_FLAGS)
+  
+  NS_DEFINE_CLASSINFO_DATA(ServiceApplication, nsDOMGenericSH,
+                           DOM_DEFAULT_SCRIPTABLE_FLAGS)
+#endif
 
   NS_DEFINE_CLASSINFO_DATA(CSSFontFaceRule, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
@@ -4152,6 +4166,20 @@ nsDOMClassInfo::Init()
   DOM_CLASSINFO_MAP_BEGIN(NavigatorServiceHandler, nsIDOMNavigatorServiceHandler)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorServiceHandler)
   DOM_CLASSINFO_MAP_END
+  
+  DOM_CLASSINFO_MAP_BEGIN(PendingOp, nsIPendingOp)
+    DOM_CLASSINFO_MAP_ENTRY(nsIPendingOp)
+  DOM_CLASSINFO_MAP_END
+
+#ifdef ANDROID
+  DOM_CLASSINFO_MAP_BEGIN(ServiceApplicationManager, nsIServiceApplicationManager)
+    DOM_CLASSINFO_MAP_ENTRY(nsIServiceApplicationManager)
+  DOM_CLASSINFO_MAP_END
+  
+  DOM_CLASSINFO_MAP_BEGIN(ServiceApplication, nsIServiceApplication)
+    DOM_CLASSINFO_MAP_ENTRY(nsIServiceApplication)
+  DOM_CLASSINFO_MAP_END
+#endif
 
   DOM_CLASSINFO_MAP_BEGIN(WebSocket, nsIWebSocket)
     DOM_CLASSINFO_MAP_ENTRY(nsIWebSocket)
diff --git a/dom/base/nsDOMClassInfoClasses.h b/dom/base/nsDOMClassInfoClasses.h
--- a/dom/base/nsDOMClassInfoClasses.h
+++ b/dom/base/nsDOMClassInfoClasses.h
@@ -426,6 +426,12 @@ DOMCI_CLASS(GeoPositionError)
 
 // navigator.service
 DOMCI_CLASS(NavigatorServiceHandler)
+DOMCI_CLASS(PendingOp)
+
+#ifdef ANDROID
+DOMCI_CLASS(ServiceApplicationManager)
+DOMCI_CLASS(ServiceApplication)
+#endif
 
 // @font-face in CSS
 DOMCI_CLASS(CSSFontFaceRule)
diff --git a/dom/interfaces/services/Makefile.in b/dom/interfaces/services/Makefile.in
old mode 100644
new mode 100755
--- a/dom/interfaces/services/Makefile.in
+++ b/dom/interfaces/services/Makefile.in
@@ -46,7 +46,9 @@ MODULE         = dom
 XPIDL_MODULE   = dom_services
 GRE_MODULE     = 1
 
-XPIDLSRCS = nsIDOMNavigatorServices.idl    \
+XPIDLSRCS = nsIDOMNavigatorServices.idl \
+	    nsIDOMApplication.idl \
+	    nsIDOMPendingOp.idl \
             $(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/dom/interfaces/services/nsIDOMApplication.idl b/dom/interfaces/services/nsIDOMApplication.idl
new file mode 100644
--- /dev/null
+++ b/dom/interfaces/services/nsIDOMApplication.idl
@@ -0,0 +1,71 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is OpenWebapp.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com> (Original Author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsIDOMPendingOp.idl"
+
+[scriptable, uuid(204ee4bf-54f9-43fb-a5df-db55dff96ae4)]
+interface nsIServiceApplication : nsISupports {
+  readonly attribute DOMString name;
+  readonly attribute DOMString description;
+  readonly attribute DOMString icon;
+};
+
+[scriptable, function, uuid(68dd9a60-fd15-4f0c-a490-7e43376ad542)]
+interface nsIServiceApplicationSuccessCallback : nsISupports {
+  void onSuccess([array, size_is(count)] in nsIServiceApplication apps, in unsigned long count);
+};
+
+[scriptable, function, uuid(d8104170-b689-472e-957e-38a25225b2a2)]
+interface nsIServiceApplicationErrorCallback : nsISupports {
+  void onError(in unsigned short errorCode, in DOMString errorMessage);
+};
+
+ /**
+ * This is the interface to extend with a property API
+ */
+[scriptable, uuid(bd23bc9b-788b-464c-bb36-7d30ca856de1)]
+interface nsIServiceApplicationManager : nsISupports {
+  const unsigned short UNKNOWN_ERROR = 0;
+  const unsigned short INVALID_ARGUMENT_ERROR = 1;
+  const unsigned short NOT_FOUND_ERROR = 2;
+  const unsigned short TIMEOUT_ERROR = 3;
+  const unsigned short IO_ERROR = 5;
+  const unsigned short NOT_SUPPORTED_ERROR = 6;
+  const unsigned short PERMISSION_DENIED_ERROR = 20;
+  const unsigned short PENDING_OPERATION_ERROR = 4;
+  nsIPendingOp getInstalledApplications(in nsIServiceApplicationSuccessCallback successCallback, [optional] in nsIServiceApplicationErrorCallback errorCallback);
+  nsIPendingOp launchApplication(in nsIServiceApplication application, [optional] in nsIServiceApplicationErrorCallback errorCallback);
+};
diff --git a/dom/interfaces/services/nsIDOMNavigatorServices.idl b/dom/interfaces/services/nsIDOMNavigatorServices.idl
--- a/dom/interfaces/services/nsIDOMNavigatorServices.idl
+++ b/dom/interfaces/services/nsIDOMNavigatorServices.idl
@@ -35,22 +35,14 @@
  * ***** END LICENSE BLOCK ***** */
 
 #include "domstubs.idl"
-
-/**
- * Pending operation object, used to cancel async calls.
- */
-[scriptable, uuid(d58cecfd-bc49-44c9-9154-34165041d667)]
-interface nsIPendingOp : nsISupports {
-  
-  void cancel();
-};
+#include "nsIDOMApplication.idl"
 
 /**
  * This is the interface to extend with a property API
  */
 [scriptable, uuid(f00f195c-3163-4b5b-9e03-6a539416065b)]
 interface nsIDOMNavigatorServiceHandler : nsISupports {
-  
+  readonly attribute nsIServiceApplicationManager ApplicationManager;
 };
 
 /**
diff --git a/dom/interfaces/services/nsIDOMPendingOp.idl b/dom/interfaces/services/nsIDOMPendingOp.idl
new file mode 100644
--- /dev/null
+++ b/dom/interfaces/services/nsIDOMPendingOp.idl
@@ -0,0 +1,45 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is OpenWebapp.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com> (Original Author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsISupports.idl"
+
+/**
+ * Pending operation object, used to cancel async calls.
+ */
+[scriptable, uuid(d58cecfd-bc49-44c9-9154-34165041d667)]
+interface nsIPendingOp : nsISupports {
+  void cancel();
+};
diff --git a/dom/ipc/ContentChild.cpp b/dom/ipc/ContentChild.cpp
--- a/dom/ipc/ContentChild.cpp
+++ b/dom/ipc/ContentChild.cpp
@@ -97,6 +97,7 @@
 
 #if defined(ANDROID)
 #include "APKOpen.h"
+#include "system/android/AndroidApplications.h"
 #endif
 
 #ifdef XP_WIN
@@ -407,6 +408,27 @@ ContentChild::DeallocPAudio(PAudioChild*
     return true;
 }
 
+PServiceApplicationsChild* ContentChild::AllocPServiceApplications()
+{
+    NS_WARNING("ContentChild::AllocPServiceApplications()");
+#ifdef ANDROID
+    PServiceApplicationsChild* child = new ServiceApplicationsChild();
+    return child;
+#else
+    return NULL;
+#endif
+}
+
+bool ContentChild::DeallocPServiceApplications(PServiceApplicationsChild* aActor)
+{
+#ifdef ANDROID
+    delete aActor;
+    return true;
+#else
+    return true;
+#endif
+}
+
 PNeckoChild* 
 ContentChild::AllocPNecko()
 {
diff --git a/dom/ipc/ContentChild.h b/dom/ipc/ContentChild.h
--- a/dom/ipc/ContentChild.h
+++ b/dom/ipc/ContentChild.h
@@ -114,8 +114,12 @@ public:
     virtual bool DeallocPExternalHelperApp(PExternalHelperAppChild *aService);
 
     virtual PStorageChild* AllocPStorage(const StorageConstructData& aData);
+    
     virtual bool DeallocPStorage(PStorageChild* aActor);
 
+    virtual PServiceApplicationsChild* AllocPServiceApplications();
+    virtual bool DeallocPServiceApplications(PServiceApplicationsChild* aActor);
+
     virtual bool RecvRegisterChrome(const InfallibleTArray<ChromePackage>& packages,
                                     const InfallibleTArray<ResourceMapping>& resources,
                                     const InfallibleTArray<OverrideMapping>& overrides,
diff --git a/dom/ipc/ContentParent.cpp b/dom/ipc/ContentParent.cpp
--- a/dom/ipc/ContentParent.cpp
+++ b/dom/ipc/ContentParent.cpp
@@ -72,6 +72,10 @@
 #include "AudioParent.h"
 #endif
 
+#ifdef ANDROID
+#include "ServiceApplicationsParent.h"
+#endif
+
 #if defined(ANDROID) || defined(LINUX)
 #include <sys/time.h>
 #include <sys/resource.h>
@@ -712,6 +716,28 @@ ContentParent::DeallocPAudio(PAudioParen
     return true;
 }
 
+PServiceApplicationsParent* ContentParent::AllocPServiceApplications()
+{
+    NS_WARNING("ContentParent::AllocPServiceApplications()");
+#ifdef ANDROID
+    ServiceApplicationsParent *parent = new ServiceApplicationsParent();
+    return parent;
+#else
+    return NULL;
+#endif
+}
+
+bool ContentParent::DeallocPServiceApplications(PServiceApplicationsParent* aActor)
+{
+#ifdef ANDROID
+    ServiceApplicationsParent *parent = static_cast<ServiceApplicationsParent*>(aActor);
+    NS_RELEASE(parent);
+    return true;
+#else
+    return true;
+#endif
+}
+
 PNeckoParent* 
 ContentParent::AllocPNecko()
 {
diff --git a/dom/ipc/ContentParent.h b/dom/ipc/ContentParent.h
--- a/dom/ipc/ContentParent.h
+++ b/dom/ipc/ContentParent.h
@@ -152,6 +152,9 @@ private:
     virtual PStorageParent* AllocPStorage(const StorageConstructData& aData);
     virtual bool DeallocPStorage(PStorageParent* aActor);
 
+    virtual PServiceApplicationsParent* AllocPServiceApplications();
+    virtual bool DeallocPServiceApplications(PServiceApplicationsParent* aActor);
+
     virtual bool RecvReadPrefsArray(InfallibleTArray<PrefTuple> *retValue);
     virtual bool RecvReadFontList(InfallibleTArray<FontListEntry>* retValue);
 
diff --git a/dom/ipc/Makefile.in b/dom/ipc/Makefile.in
--- a/dom/ipc/Makefile.in
+++ b/dom/ipc/Makefile.in
@@ -65,6 +65,10 @@ EXPORTS_mozilla/dom = \
   TabChild.h \
   $(NULL)
 
+ifeq ($(OS_TARGET),Android)
+EXPORTS_mozilla/dom += ServiceApplicationsParent.h
+endif
+
 CPPSRCS = \
   ContentProcess.cpp \
   ContentParent.cpp \
@@ -87,6 +91,11 @@ CPPSRCS += \
 endif
 
 
+ifeq ($(OS_TARGET),Android)
+CPPSRCS += ServiceApplicationsParent.cpp
+LOCAL_INCLUDES += -I$(topsrcdir)/dom/
+endif
+
 include $(topsrcdir)/config/config.mk
 include $(topsrcdir)/ipc/chromium/chromium-config.mk
 include $(topsrcdir)/config/rules.mk
diff --git a/dom/ipc/PContent.ipdl b/dom/ipc/PContent.ipdl
--- a/dom/ipc/PContent.ipdl
+++ b/dom/ipc/PContent.ipdl
@@ -44,6 +44,7 @@ include protocol PNecko;
 include protocol PExternalHelperApp;
 include protocol PStorage;
 include protocol PMemoryReportRequest;
+include protocol PServiceApplications;
 
 include "mozilla/chrome/RegistryMessageUtils.h";
 include "mozilla/net/NeckoMessageUtils.h";
@@ -98,6 +99,7 @@ rpc protocol PContent
     manages PExternalHelperApp;
     manages PStorage;
     manages PMemoryReportRequest;
+    manages PServiceApplications;
 
 child:
     PBrowser(PRUint32 chromeFlags);
@@ -137,6 +139,8 @@ parent:
 
     PAudio(PRInt32 aNumChannels, PRInt32 aRate, PRInt32 aFormat);
 
+    PServiceApplications();
+
     // Services remoting
 
     async StartVisitedQuery(URI uri);
diff --git a/dom/ipc/PServiceApplications.ipdl b/dom/ipc/PServiceApplications.ipdl
new file mode 100644
--- /dev/null
+++ b/dom/ipc/PServiceApplications.ipdl
@@ -0,0 +1,69 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* vim: set sw=4 ts=8 et tw=80 : */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Audio IPC
+ *
+ * The Initial Developer of the Original Code is
+ *   The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+include protocol PContent;
+
+namespace mozilla {
+namespace dom {
+
+struct Application {
+  nsString name;
+  nsString description;
+  nsString icon;
+  nsString packageName;
+  nsString className;
+};
+
+async protocol PServiceApplications
+{
+  manager PContent;
+
+parent:
+  AskInstalledApplications();
+  LaunchApplication(nsString packageName, nsString className);
+
+child:
+  GetInstalledApplications(Application[] apps);
+  GetLaunchApplicationStatus(bool status);
+
+  __delete__();
+};
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/ipc/ServiceApplicationsParent.cpp b/dom/ipc/ServiceApplicationsParent.cpp
new file mode 100644
--- /dev/null
+++ b/dom/ipc/ServiceApplicationsParent.cpp
@@ -0,0 +1,119 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* vim: set sw=4 ts=8 et tw=80 : */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Audio IPC
+ *
+ * The Initial Developer of the Original Code is
+ *   The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "ServiceApplicationsParent.h"
+#include "AndroidBridge.h"
+#include "nsCRTGlue.h"
+
+namespace mozilla {
+namespace dom {
+    
+NS_IMPL_THREADSAFE_ISUPPORTS0(ServiceApplicationsParent)
+
+bool
+ServiceApplicationsParent::RecvAskInstalledApplications()
+{
+    AndroidBridge::AutoLocalJNIFrame jniFrame;
+    JNIEnv *jEnv = GetJNIForThread();
+    jclass jGeckoAppShellClass = GetGeckoAppShellClass();
+  
+    if (!jEnv || !jGeckoAppShellClass)
+        return NS_ERROR_FAILURE;
+    
+    jmethodID jGetServiceApplicationsList = jEnv->GetStaticMethodID(jGeckoAppShellClass, "getServiceApplicationsList", "()[Ljava/lang/String;");
+    jobject obj = jEnv->CallStaticObjectMethod(jGeckoAppShellClass, jGetServiceApplicationsList);
+    jobjectArray arr = static_cast<jobjectArray>(obj);
+    
+    if (!arr)
+        return NS_ERROR_FAILURE;
+    
+    jsize len = jEnv->GetArrayLength(arr);
+    InfallibleTArray<Application> apps;
+    for (jsize i = 0; i < len; i += 5) {
+        nsJNIString name(static_cast<jstring>(jEnv->GetObjectArrayElement(arr, i)));
+        nsJNIString description(static_cast<jstring>(jEnv->GetObjectArrayElement(arr, i + 1)));
+        nsJNIString icon(static_cast<jstring>(jEnv->GetObjectArrayElement(arr, i + 2)));
+        nsJNIString packageName(static_cast<jstring>(jEnv->GetObjectArrayElement(arr, i + 3)));
+        nsJNIString className(static_cast<jstring>(jEnv->GetObjectArrayElement(arr, i + 4)));
+        Application app(name, description, icon, packageName, className);
+        apps.AppendElement(app);
+    }
+    SendGetInstalledApplications(apps);
+    return true;
+}
+
+bool
+ServiceApplicationsParent::RecvLaunchApplication(const nsString& aPackageName, const nsString& aClassName) {
+    AndroidBridge::AutoLocalJNIFrame jniFrame;
+    JNIEnv *jEnv = GetJNIForThread();
+    jclass jGeckoAppShellClass = GetGeckoAppShellClass();
+
+    if (!jEnv || !jGeckoAppShellClass)
+        return NS_ERROR_FAILURE;
+
+    jmethodID jLaunchApplications = jEnv->GetStaticMethodID(jGeckoAppShellClass, "launchApplication", "(Ljava/lang/String;Ljava/lang/String;)Z");
+
+    jstring jstrPackage = jEnv->NewString(aPackageName.get(), NS_strlen(aPackageName.get()));
+    jstring jstrClass = jEnv->NewString(aClassName.get(), NS_strlen(aClassName.get()));
+
+    if (!jstrPackage || !jstrClass) {
+        SendGetLaunchApplicationStatus(false);
+        return true;
+    }
+
+    jboolean res = jEnv->CallStaticBooleanMethod(jGeckoAppShellClass, jLaunchApplications, jstrPackage, jstrClass);
+
+    SendGetLaunchApplicationStatus(res);
+    return true;
+}
+
+ServiceApplicationsParent::ServiceApplicationsParent()
+{
+    MOZ_COUNT_CTOR(ServiceApplicationsParent);
+    NS_WARNING("ServiceApplicationsParent::ServiceApplicationsParent()");
+}
+
+ServiceApplicationsParent::~ServiceApplicationsParent()
+{
+    MOZ_COUNT_DTOR(ServiceApplicationsParent);
+    NS_WARNING("ServiceApplicationsParent::~ServiceApplicationsParent()");
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/ipc/ServiceApplicationsParent.h b/dom/ipc/ServiceApplicationsParent.h
new file mode 100644
--- /dev/null
+++ b/dom/ipc/ServiceApplicationsParent.h
@@ -0,0 +1,66 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* vim: set sw=4 ts=8 et tw=80 : */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Audio IPC
+ *
+ * The Initial Developer of the Original Code is
+ *   The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef mozilla_dom_ServiceApplicationsParent_h
+#define mozilla_dom_ServiceApplicationsParent_h
+
+#include "mozilla/dom/PServiceApplicationsParent.h"
+#include "nsISupports.h"
+
+namespace mozilla {
+namespace dom {
+    
+class ServiceApplicationsParent :
+    public PServiceApplicationsParent, public nsISupports
+{
+    NS_DECL_ISUPPORTS
+    
+    virtual bool
+    RecvAskInstalledApplications();
+    
+    virtual bool
+    RecvLaunchApplication(const nsString&, const nsString&);
+    
+    ServiceApplicationsParent();
+    virtual ~ServiceApplicationsParent();
+};
+} // namespace dom
+} // namespace mozilla
+
+#endif
diff --git a/dom/ipc/ipdl.mk b/dom/ipc/ipdl.mk
--- a/dom/ipc/ipdl.mk
+++ b/dom/ipc/ipdl.mk
@@ -43,4 +43,5 @@ IPDLSRCS = \
   PDocumentRenderer.ipdl \
   PContentPermissionRequest.ipdl \
   PMemoryReportRequest.ipdl \
+  PServiceApplications.ipdl \
   $(NULL)
diff --git a/dom/src/services/Makefile.in b/dom/src/services/Makefile.in
--- a/dom/src/services/Makefile.in
+++ b/dom/src/services/Makefile.in
@@ -50,6 +50,7 @@ FORCE_STATIC_LIB = 1
 
 CPPSRCS		= \
 		nsNavigatorService.cpp \
+		nsPendingOp.cpp \
 		$(NULL)
 
 EXTRA_DSO_LDOPTS = \
@@ -59,18 +60,18 @@ EXTRA_DSO_LDOPTS = \
 LOCAL_INCLUDES = \
 		-I$(topsrcdir)/dom/base \
 		-I$(topsrcdir)/dom/ipc \
-		-I$(topsrcdir)/content/base/src \
-		-I$(topsrcdir)/content/events/src \
 		$(NULL)
 
-EXPORTS        = nsNavigatorService.h
+EXPORTS        = nsNavigatorService.h nsPendingOp.h
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),android)
 LOCAL_INCLUDES  += -I$(topsrcdir)/dom/system/android \
                    $(NULL)
 endif
 
+
 include $(topsrcdir)/config/config.mk
+include $(topsrcdir)/ipc/chromium/chromium-config.mk
 include $(topsrcdir)/config/rules.mk
 
 DEFINES += -D_IMPL_NS_LAYOUT
diff --git a/dom/src/services/nsNavigatorService.cpp b/dom/src/services/nsNavigatorService.cpp
--- a/dom/src/services/nsNavigatorService.cpp
+++ b/dom/src/services/nsNavigatorService.cpp
@@ -34,9 +34,14 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
+#include "base/basictypes.h"
 #include "nsNavigatorService.h"
 #include "nsDOMClassInfo.h"
 
+#ifdef ANDROID
+#include "AndroidApplications.h"
+#endif
+
 DOMCI_DATA(NavigatorServiceHandler, nsNavigatorServiceHandler)
 
 NS_INTERFACE_MAP_BEGIN(nsNavigatorServiceHandler)
@@ -59,3 +64,16 @@ nsNavigatorServiceHandler::~nsNavigatorS
   fprintf(stderr, "XxXxX nsNavigatorServiceHandler::~nsNavigatorServiceHandler()\n");
   /* destructor code */
 }
+
+/* readonly attribute nsIServiceApplicationManager ApplicationManager; */
+NS_IMETHODIMP nsNavigatorServiceHandler::GetApplicationManager(nsIServiceApplicationManager **aApplicationManager)
+{
+#ifdef ANDROID
+    *aApplicationManager = new nsAndroidServiceApplicationManager();
+    if (*aApplicationManager) {
+        NS_ADDREF(*aApplicationManager);
+        return NS_OK;
+    }
+#endif
+    return NS_ERROR_NOT_IMPLEMENTED;
+}
diff --git a/dom/src/services/nsPendingOp.cpp b/dom/src/services/nsPendingOp.cpp
new file mode 100755
--- /dev/null
+++ b/dom/src/services/nsPendingOp.cpp
@@ -0,0 +1,72 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Navigator Service.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation
+ * Portions created by the Initial Developer are Copyright (C) 2008
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com>  (Original Author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsDOMClassInfo.h"
+#include "nsPendingOp.h"
+
+DOMCI_DATA(PendingOp, nsPendingOp)
+
+NS_INTERFACE_MAP_BEGIN(nsPendingOp)
+  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIPendingOp)
+  NS_INTERFACE_MAP_ENTRY(nsIPendingOp)
+  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(PendingOp)
+NS_INTERFACE_MAP_END
+
+NS_IMPL_ADDREF(nsPendingOp)
+NS_IMPL_RELEASE(nsPendingOp)
+
+nsPendingOp::nsPendingOp() : mCanceled(false)
+{
+  /* member initializers and constructor code */
+}
+
+nsPendingOp::~nsPendingOp()
+{
+  /* destructor code */
+}
+
+/* void cancel (); */
+NS_IMETHODIMP nsPendingOp::Cancel()
+{
+    NS_WARNING("nsPendingOp::Cancel()");
+    mCanceled = true;
+    onCanceled();
+    return NS_OK;
+}
+
+bool nsPendingOp::isCanceled() {
+    return mCanceled;
+}
diff --git a/dom/src/services/nsPendingOp.h b/dom/src/services/nsPendingOp.h
new file mode 100644
--- /dev/null
+++ b/dom/src/services/nsPendingOp.h
@@ -0,0 +1,58 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Navigator Service.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation
+ * Portions created by the Initial Developer are Copyright (C) 2008
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com>  (Original Author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef nsPendingOp_h_
+#define nsPendingOp_h_
+
+#include "nsIDOMPendingOp.h"
+
+class nsPendingOp : public nsIPendingOp
+{
+public:
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSIPENDINGOP
+
+  nsPendingOp();
+  bool isCanceled();
+
+protected:
+    ~nsPendingOp();
+    bool mCanceled;
+    virtual void onCanceled() = 0;
+  /* additional members */
+};
+
+#endif
diff --git a/dom/system/android/AndroidApplications.cpp b/dom/system/android/AndroidApplications.cpp
new file mode 100644
--- /dev/null
+++ b/dom/system/android/AndroidApplications.cpp
@@ -0,0 +1,325 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Android APIs.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation
+ * Portions created by the Initial Developer are Copyright (C) 2008
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com>  (Original Author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "AndroidApplications.h"
+#include "nsDOMClassInfo.h"
+#include "mozilla/dom/PServiceApplicationsChild.h"
+#include "mozilla/dom/ContentChild.h"
+
+using namespace mozilla;
+
+/**
+ * pendingOp for getInstalledApps()
+ */
+nsGetInstalledAppPendingOp::nsGetInstalledAppPendingOp(nsIServiceApplicationSuccessCallback *successCallback,
+                           nsIServiceApplicationErrorCallback *errorCallback) :
+mSuccessCallback(successCallback), mErrorCallback(errorCallback) {
+    NS_WARNING("nsGetInstalledAppPendingOp::nsGetInstalledAppPendingOp()");
+    NS_ADDREF(mSuccessCallback);
+    if (mErrorCallback)
+      NS_ADDREF(mErrorCallback);
+}
+
+bool nsGetInstalledAppPendingOp::RecvGetInstalledApplications(const InfallibleTArray<mozilla::dom::Application>& aApps) {
+    NS_WARNING("nsGetInstalledAppPendingOp::RecvGetInstalledApplications() HOORAY");
+
+    if (isCanceled())
+      return true;
+
+    PRUint32 i;
+
+    nsIServiceApplication** apps = nsnull;
+    if (aApps.Length() != 0) {
+        apps = static_cast<nsIServiceApplication**>(NS_Alloc(aApps.Length() * sizeof(nsIServiceApplication*)));
+        if (!apps)
+            return true;
+    }
+    else
+        return true;
+
+    for (i = 0; i < aApps.Length(); i++) {
+        mozilla::dom::Application papp = aApps.ElementAt(i);
+        nsIServiceApplication* app = new nsAndroidServiceApplication(papp.name(), papp.description(), papp.icon(),
+                                                                     papp.packageName(), papp.className());
+        NS_ADDREF(app);
+        apps[i] = app;
+    }
+    if (apps)
+      NS_ADDREF(*apps);
+    NS_WARNING("About to call success callback");
+    mSuccessCallback->OnSuccess(apps, aApps.Length());
+    nsMemory::Free(apps);
+    NS_WARNING("all done");
+    return true;
+}
+
+void nsGetInstalledAppPendingOp::start() {
+    // create the object in the parent...
+    if (isCanceled())
+      return;
+    mozilla::dom::ContentChild * cpc = mozilla::dom::ContentChild::GetSingleton();
+    NS_ASSERTION(cpc, "Content Protocol is NULL!");
+    mozilla::dom::ServiceApplicationsChild *child = static_cast<mozilla::dom::ServiceApplicationsChild*> (cpc->SendPServiceApplicationsConstructor());
+    NS_ASSERTION(child, "SendPServiceApplicationsConstructor returned NULL");
+    child->setPendingOp(this);
+    child->SendAskInstalledApplications();
+}
+
+void nsGetInstalledAppPendingOp::onCanceled() {
+    NS_WARNING("nsGetInstalledAppPendingOp::onCanceled()");
+    if (mErrorCallback) {
+        NS_WARNING("Calling errorCallback.onError()");
+        mErrorCallback->OnError(nsIServiceApplicationManager::PENDING_OPERATION_ERROR,
+                                NS_LITERAL_STRING("Operation Canceled"));
+        NS_WARNING("Calling errorCallback.onError() called");
+    }
+}
+
+nsGetInstalledAppPendingOp::~nsGetInstalledAppPendingOp() {
+    
+};
+
+/**
+ * pendingOp for launchApplication()
+ */
+nsLaunchAppPendingOp::nsLaunchAppPendingOp(nsIServiceApplicationErrorCallback *errorCallback) :
+   mErrorCallback(errorCallback) {
+    NS_WARNING("nsLaunchAppPendingOp::nsLaunchAppPendingOp()");
+    if (mErrorCallback)
+      NS_ADDREF(mErrorCallback);
+}
+
+bool nsLaunchAppPendingOp::RecvGetLaunchApplicationStatus(const bool& status) {
+    NS_WARNING("nsLaunchAppPendingOp::RecvGetLaunchApplicationStatus() HOORAY");
+
+    if (isCanceled())
+      return true;
+
+    if (!status && mErrorCallback)
+      mErrorCallback->OnError(nsIServiceApplicationManager::PENDING_OPERATION_ERROR,
+                                NS_LITERAL_STRING("Unable to start application"));
+    return true;
+}
+
+void nsLaunchAppPendingOp::start(const nsString& aPackageName, const nsString& aClassName) {
+    // create the object in the parent...
+    if (isCanceled())
+      return;
+    mozilla::dom::ContentChild * cpc = mozilla::dom::ContentChild::GetSingleton();
+    NS_ASSERTION(cpc, "Content Protocol is NULL!");
+    mozilla::dom::ServiceApplicationsChild *child = static_cast<mozilla::dom::ServiceApplicationsChild*> (cpc->SendPServiceApplicationsConstructor());
+    NS_ASSERTION(child, "SendPServiceApplicationsConstructor returned NULL");
+    child->setPendingOp(this);
+    child->SendLaunchApplication(aPackageName, aClassName);
+}
+
+void nsLaunchAppPendingOp::onCanceled() {
+    NS_WARNING("nsLaunchAppPendingOp::onCanceled()");
+    if (mErrorCallback) {
+        NS_WARNING("Calling errorCallback.onError()");
+        mErrorCallback->OnError(nsIServiceApplicationManager::PENDING_OPERATION_ERROR,
+                                NS_LITERAL_STRING("Operation Canceled"));
+        NS_WARNING("Calling errorCallback.onError() called");
+    }
+}
+
+nsLaunchAppPendingOp::~nsLaunchAppPendingOp() {
+    
+};
+
+namespace mozilla {
+namespace dom {
+
+void    
+ServiceApplicationsChild::setPendingOp(nsGetInstalledAppPendingOp* const op) {
+    mPendingOp = op;
+}
+
+void    
+ServiceApplicationsChild::setPendingOp(nsLaunchAppPendingOp* const op) {
+    mPendingOp = op;
+}
+
+bool
+ServiceApplicationsChild::RecvGetInstalledApplications(const InfallibleTArray<Application>& apps)
+{
+    if (mPendingOp)
+      return static_cast<nsGetInstalledAppPendingOp*>(mPendingOp)->RecvGetInstalledApplications(apps);
+    return true;
+}
+
+bool
+ServiceApplicationsChild::RecvGetLaunchApplicationStatus(const bool& status)
+{
+    if (mPendingOp)
+      return static_cast<nsLaunchAppPendingOp*>(mPendingOp)->RecvGetLaunchApplicationStatus(status);
+    return true;
+}
+
+ServiceApplicationsChild::ServiceApplicationsChild() : mPendingOp(NULL)
+{
+    MOZ_COUNT_CTOR(ServiceApplicationsChild);
+}
+
+ServiceApplicationsChild::~ServiceApplicationsChild()
+{
+    MOZ_COUNT_DTOR(ServiceApplicationsChild);
+}
+
+} // namespace dom
+} // namespace mozilla
+
+DOMCI_DATA(ServiceApplicationManager, nsAndroidServiceApplicationManager)
+
+NS_INTERFACE_MAP_BEGIN(nsAndroidServiceApplicationManager)
+  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIServiceApplicationManager)
+  NS_INTERFACE_MAP_ENTRY(nsIServiceApplicationManager)
+  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ServiceApplicationManager)
+NS_INTERFACE_MAP_END
+
+NS_IMPL_ADDREF(nsAndroidServiceApplicationManager)
+NS_IMPL_RELEASE(nsAndroidServiceApplicationManager)
+
+nsAndroidServiceApplicationManager::nsAndroidServiceApplicationManager()
+{
+    NS_WARNING("nsAndroidServiceApplicationManager::nsAndroidServiceApplicationManager()");
+  /* member initializers and constructor code */
+}
+
+nsAndroidServiceApplicationManager::~nsAndroidServiceApplicationManager()
+{
+    NS_WARNING("nsAndroidServiceApplicationManager::~nsAndroidServiceApplicationManager()");
+  /* destructor code */
+}
+
+/* nsIPendingOp getInstalledApplications (in nsIServiceApplicationSuccessCallback successCallback, [optional] in nsIServiceApplicationErrorCallback 
+errorCallback); */
+NS_IMETHODIMP nsAndroidServiceApplicationManager::GetInstalledApplications(nsIServiceApplicationSuccessCallback *successCallback,
+                                                                    nsIServiceApplicationErrorCallback *errorCallback,
+                                                                    nsIPendingOp **_retval NS_OUTPARAM)
+{
+    NS_WARNING("nsAndroidServiceApplicationManager::GetInstalledApplications()");
+    NS_ENSURE_ARG_POINTER(successCallback);
+    //NS_ENSURE_ARG_POINTER(*_retval); 
+
+    nsGetInstalledAppPendingOp* pending = new nsGetInstalledAppPendingOp(successCallback, errorCallback);
+    
+    if (!pending)
+      return NS_ERROR_OUT_OF_MEMORY;
+
+    NS_ADDREF(*_retval = pending);
+    pending->start();
+    return NS_OK;
+}
+
+NS_IMETHODIMP nsAndroidServiceApplicationManager::LaunchApplication(nsIServiceApplication *application, nsIServiceApplicationErrorCallback *errorCallback,
+                                                                    nsIPendingOp **_retval NS_OUTPARAM) {
+    NS_WARNING("nsAndroidServiceApplicationManager::LaunchApplication()");
+    
+    nsAndroidServiceApplication* app = (nsAndroidServiceApplication*)application;
+    nsLaunchAppPendingOp* pending = new nsLaunchAppPendingOp(errorCallback);
+    
+    if (!pending)
+      return NS_ERROR_OUT_OF_MEMORY;
+    
+    NS_ADDREF(*_retval = pending);
+
+    pending->start(app->GetPackageName(), app->GetClassName());
+    return NS_OK;
+}
+
+/**
+ * Application object
+ **/
+
+DOMCI_DATA(ServiceApplication, nsAndroidServiceApplication)
+
+NS_INTERFACE_MAP_BEGIN(nsAndroidServiceApplication)
+  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIServiceApplication)
+  NS_INTERFACE_MAP_ENTRY(nsIServiceApplication)
+  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ServiceApplication)
+NS_INTERFACE_MAP_END
+
+NS_IMPL_ADDREF(nsAndroidServiceApplication)
+NS_IMPL_RELEASE(nsAndroidServiceApplication)
+
+nsAndroidServiceApplication::nsAndroidServiceApplication()
+{
+  /* member initializers and constructor code */
+}
+
+nsAndroidServiceApplication::nsAndroidServiceApplication(const nsAString & aName, const nsAString & aDescription,
+                              const nsAString & aIcon, const nsAString & aPackageName,
+                              const nsAString & aClassName) :
+mName(aName), mDescription(aDescription), mIcon(aIcon), mPackageName(aPackageName), mClassName(aClassName)
+{
+  NS_WARNING("nsAndroidServiceApplication::nsAndroidServiceApplication()");
+}
+
+nsAndroidServiceApplication::~nsAndroidServiceApplication()
+{
+    NS_WARNING("nsAndroidServiceApplication::~nsAndroidServiceApplication()");
+  /* destructor code */
+}
+
+/* readonly attribute DOMString name; */
+NS_IMETHODIMP nsAndroidServiceApplication::GetName(nsAString & aName)
+{
+    aName = mName;
+    return NS_OK;
+}
+
+/* readonly attribute DOMString description; */
+NS_IMETHODIMP nsAndroidServiceApplication::GetDescription(nsAString & aDescription)
+{
+    aDescription = mDescription;
+    return NS_OK;
+}
+
+/* readonly attribute DOMString icon; */
+NS_IMETHODIMP nsAndroidServiceApplication::GetIcon(nsAString & aIcon)
+{
+    aIcon = mIcon;
+    return NS_OK;
+}
+
+const nsString nsAndroidServiceApplication::GetPackageName() {
+    return mPackageName;
+}
+
+const nsString nsAndroidServiceApplication::GetClassName() {
+    return mClassName;
+}
diff --git a/dom/system/android/AndroidApplications.h b/dom/system/android/AndroidApplications.h
new file mode 100755
--- /dev/null
+++ b/dom/system/android/AndroidApplications.h
@@ -0,0 +1,151 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Android APIs.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation
+ * Portions created by the Initial Developer are Copyright (C) 2008
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com>  (Original Author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef AndroidApplications_h_
+#define AndroidApplications_h_
+
+#include "base/basictypes.h"
+#include "nsIDOMApplication.h"
+#include "nsString.h"
+#include "nsPendingOp.h"
+
+#include "mozilla/dom/PServiceApplicationsChild.h"
+
+
+class nsAndroidServiceApplication : public nsIServiceApplication
+{
+public:
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSISERVICEAPPLICATION
+
+  nsAndroidServiceApplication();
+  nsAndroidServiceApplication(const nsAString & aName, const nsAString & aDescription,
+                              const nsAString & aIcon, const nsAString & aPackageName,
+                              const nsAString & aClassName);
+ 
+  const nsString GetPackageName();
+  const nsString GetClassName();
+
+private:
+  ~nsAndroidServiceApplication();
+  nsString mName;
+  nsString mDescription;
+  nsString mIcon;
+  nsString mPackageName;
+  nsString mClassName;
+
+protected:
+  /* additional members */
+};
+
+class nsAndroidServiceApplicationManager : public nsIServiceApplicationManager
+{
+public:
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSISERVICEAPPLICATIONMANAGER
+
+  nsAndroidServiceApplicationManager();
+
+private:
+  ~nsAndroidServiceApplicationManager();
+
+protected:
+  /* additional members */
+};
+
+class nsGetInstalledAppPendingOp : public nsPendingOp {
+public:
+    nsGetInstalledAppPendingOp(nsIServiceApplicationSuccessCallback *successCallback,
+                               nsIServiceApplicationErrorCallback *errorCallback);
+
+    virtual bool RecvGetInstalledApplications(const InfallibleTArray<mozilla::dom::Application>& aApps);
+
+    void start();
+
+protected:
+    nsIServiceApplicationSuccessCallback* mSuccessCallback;
+    nsIServiceApplicationErrorCallback*   mErrorCallback;
+    
+    void onCanceled();
+private:
+    ~nsGetInstalledAppPendingOp();
+};
+
+class nsLaunchAppPendingOp : public nsPendingOp {
+public:
+    nsLaunchAppPendingOp(nsIServiceApplicationErrorCallback *errorCallback);
+
+    virtual bool RecvGetLaunchApplicationStatus(const bool& status);
+
+    void start(const nsString& aPackageName, const nsString& aClassName);
+
+protected:
+    nsIServiceApplicationErrorCallback*   mErrorCallback;
+    
+    void onCanceled();
+private:
+    ~nsLaunchAppPendingOp();
+};
+
+namespace mozilla {
+namespace dom {
+class ServiceApplicationsChild :
+    public PServiceApplicationsChild
+{
+public:
+    virtual bool
+    RecvGetInstalledApplications(const InfallibleTArray<Application>& apps);
+    
+    virtual bool
+    RecvGetLaunchApplicationStatus(const bool&);
+    
+    ServiceApplicationsChild();
+
+    void setPendingOp(nsGetInstalledAppPendingOp* const op);
+    void setPendingOp(nsLaunchAppPendingOp* const op);
+
+protected:
+    nsPendingOp* mPendingOp;
+
+private:
+    virtual ~ServiceApplicationsChild();
+
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif
diff --git a/dom/system/android/Makefile.in b/dom/system/android/Makefile.in
--- a/dom/system/android/Makefile.in
+++ b/dom/system/android/Makefile.in
@@ -41,25 +41,28 @@ VPATH       = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
-MODULE      = dom
-LIBRARY_NAME    = domsystemandroid_s
+MODULE       = dom
+LIBRARY_NAME = domsystemandroid_s
 
 # we don't want the shared lib, but we want to force the creation of a static lib.
 LIBXUL_LIBRARY   = 1
 FORCE_STATIC_LIB = 1
-EXPORT_LIBRARY = 1
+EXPORT_LIBRARY   = 1
+
+CPPSRCS = \
+        nsAccelerometerSystem.cpp \
+        AndroidLocationProvider.cpp \
+        nsHapticFeedback.cpp \
+	AndroidApplications.cpp \
+        $(NULL)
+
+LOCAL_INCLUDES  += -I$(topsrcdir)/dom/src/geolocation \
+		   -I$(topsrcdir)/dom/base \
+		   -I$(topsrcdir)/dom/ipc \
+                   $(NULL)
 
 include $(topsrcdir)/config/config.mk
 include $(topsrcdir)/ipc/chromium/chromium-config.mk
-
-CPPSRCS     = \
-        nsAccelerometerSystem.cpp \
-        AndroidLocationProvider.cpp \
-        nsHapticFeedback.cpp \
-        $(NULL)
-
-LOCAL_INCLUDES  += -I$(topsrcdir)/dom/src/geolocation \
-                     $(NULL)
-
 include $(topsrcdir)/config/rules.mk
 
+DEFINES += -D_IMPL_NS_LAYOUT
diff --git a/embedding/android/GeckoAppShell.java b/embedding/android/GeckoAppShell.java
--- a/embedding/android/GeckoAppShell.java
+++ b/embedding/android/GeckoAppShell.java
@@ -693,6 +693,59 @@ public class GeckoAppShell
         return false;
     }
 
+    static String[] getServiceApplicationsList() {
+        PackageManager pm = GeckoApp.surfaceView.getContext().getPackageManager();
+        List<ApplicationInfo> list = pm.getInstalledApplications(0);
+        int numAttr = 5; // name, description, icon, packageName, className
+        String[] ret = new String[list.size() * numAttr];
+        int app = 0;
+        for (int i = 0; i < list.size(); i++) {
+            ApplicationInfo info = list.get(i);
+            ret[app * numAttr] = pm.getApplicationLabel(info).toString();
+            // XXX can we find a better description in some meta-data?
+            ret[app * numAttr + 1] = pm.getApplicationLabel(info).toString();
+            try {
+                Resources resources = pm.getResourcesForApplication(info);
+                InputStream is = resources.openRawResource(info.icon);
+                String base64 = "data:image/png;base64,";
+                byte[] buffer = new byte[16384];
+                int read = 0;
+                while (read != -1) {
+                    read = is.read(buffer, 0, 16384);
+                    //Log.w("GeckoAppJava", "read " + read);
+                    if (read != -1)
+                      base64 += android.util.Base64.encodeToString(buffer, 0, read, android.util.Base64.NO_WRAP);
+                }
+                is.close();
+                ret[app * numAttr + 2] = base64;
+                ret[app * numAttr + 3] = info.packageName;
+                ret[app * numAttr + 4] = info.className;
+                Log.w("GeckoAppJava", "package=" + info.packageName + " class=" + info.className);
+                app++;
+            } catch (Exception e) {
+                Log.w("GeckoAppJava", "Discarding " + "package=" + info.packageName + " class=" + info.className);
+            }
+        }
+        // resize the array to only carry |app| elements
+        int oldSize = java.lang.reflect.Array.getLength(ret);
+        String[] newArray = new String[app * numAttr];
+        int preserveLength = Math.min(list.size(), app);
+        if (preserveLength > 0)
+           System.arraycopy(ret, 0, newArray, 0, preserveLength * numAttr);
+        return newArray;
+    }
+    
+    static boolean launchApplication(String aPackageName, String aClassName) {
+        Log.w("GeckoAppJava", "Launching package=" + aPackageName + " class=" + aClassName);
+        //Intent intent = new Intent(Intent.ACTION_MAIN);
+        //intent.setClassName(aPackageName, aClassName);
+        //GeckoApp.mAppContext.sendBroadcast(intent);
+        PackageManager pm = GeckoApp.surfaceView.getContext().getPackageManager();
+        Intent i = pm.getLaunchIntentForPackage(aPackageName);
+        GeckoApp.mAppContext.startActivity(i);
+        return true;
+    }
+
     static String[] getHandlersForMimeType(String aMimeType, String aAction) {
         Intent intent = getIntentForActionString(aAction);
         if (aMimeType != null && aMimeType.length() > 0)
diff --git a/widget/src/android/AndroidJavaWrappers.h b/widget/src/android/AndroidJavaWrappers.h
--- a/widget/src/android/AndroidJavaWrappers.h
+++ b/widget/src/android/AndroidJavaWrappers.h
@@ -367,6 +367,22 @@ public:
     static jmethodID jGetThoroughfareMethod;
 };
 
+class Application;
+
+
+class AndroidApplication : public WrappedJavaObject
+{
+public:
+    static void InitApplicationClass(JNIEnv *jEnv);
+    static Application* CreateApplication(JNIEnv *jenv, jobject jobj);
+    static jclass jApplicationClass;
+    static jfieldID jName;
+    static jfieldID jDescription;
+    static jfieldID jIcon;
+    static jfieldID jPackageName;
+    static jfieldID jClassName;
+};
+
 class AndroidGeckoEvent : public WrappedJavaObject
 {
 public:
diff --git a/widget/src/android/Makefile.in b/widget/src/android/Makefile.in
--- a/widget/src/android/Makefile.in
+++ b/widget/src/android/Makefile.in
@@ -103,6 +103,7 @@ LOCAL_INCLUDES += \
 	-I$(topsrcdir)/widget/src/xpwidgets \
 	-I$(topsrcdir)/widget/src/shared \
 	-I$(topsrcdir)/dom/system/android \
+	-I$(topsrcdir)/dom/ipc \
 	-I$(srcdir) \
 	$(NULL)
 
