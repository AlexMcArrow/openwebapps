# HG changeset patch
# User Fabrice Desré <fabrice@mozilla.com>
# Parent 90640e14c1ddd6680991d51b739baf14ba55e8c6
Bug 609043 - Add support for Open Web Apps

diff --git a/mobile/chrome/content/browser-ui.js b/mobile/chrome/content/browser-ui.js
--- a/mobile/chrome/content/browser-ui.js
+++ b/mobile/chrome/content/browser-ui.js
@@ -531,6 +531,7 @@ var BrowserUI = {
       FullScreenVideo.init();
       NewTabPopup.init();
       CharsetMenu.init();
+      WebappsUI.init();
 
       // If some add-ons were disabled during during an application update, alert user
       if (Services.prefs.prefHasUserValue("extensions.disabledAddons")) {
diff --git a/mobile/chrome/content/common-ui.js b/mobile/chrome/content/common-ui.js
--- a/mobile/chrome/content/common-ui.js
+++ b/mobile/chrome/content/common-ui.js
@@ -1318,6 +1318,53 @@ var WebappsUI = {
   _dialog: null,
   _manifest: null,
 
+  init: function() {
+    this.messageManager = Cc["@mozilla.org/parentprocessmessagemanager;1"].getService(Ci.nsIFrameMessageManager);
+    this.messageManager.addMessageListener("OpenWebapp:Install", this);
+    this.messageManager.addMessageListener("OpenWebapp:GetLocale", this);
+    this.messageManager.addMessageListener("OpenWebapp:IsInstalled", this);
+  },
+  
+  receiveMessage: function(aMessage) {
+    switch(aMessage.name) {
+      case "OpenWebapp:Install":
+        let manifest = aMessage.json;
+        let self = this;
+        manifest.successCallback = function(aManifest) {
+          self.messageManager.sendAsyncMessage("OpenWebapp:Install:Success", aManifest);
+        }
+        manifest.errorCallback = function(aManifest) {
+          self.messageManager.sendAsyncMessage("OpenWebapp:Install:Error", aManifest);
+        }
+        WebappsUI.show(manifest);
+        break;
+      case "OpenWebapp:GetLocale":
+        let chrome = Cc["@mozilla.org/chrome/chrome-registry;1"].getService(Ci.nsIXULChromeRegistry);
+        chrome.QueryInterface(Ci.nsIToolkitChromeRegistry);
+        return { locale : chrome.getSelectedLocale("browser") };
+        break;
+      case "OpenWebapp:IsInstalled":
+        let webapp = Cc["@mozilla.org/webapps/installer;1"].getService(Ci.nsIWebappsSupport);
+        return  { installed: webapp.isApplicationInstalled(aMessage.json.uri) };
+        break;
+    }
+  },
+  
+  checkBox: function(aEvent) {
+    let elem = aEvent.originalTarget;
+    let perm = elem.getAttribute("perm");
+    if (this._manifest.capabilities && this._manifest.capabilities.indexOf(perm) != -1) {
+      if (elem.checked) {
+        elem.classList.remove("webapps-noperm");
+        elem.classList.add("webapps-perm");
+      }
+      else {
+        elem.classList.remove("webapps-perm");
+        elem.classList.add("webapps-noperm");
+      }
+    }
+  },
+
   show: function show(aManifest) {
     this._manifest = aManifest;
     this._dialog = importDialog(window, "chrome://browser/content/webapps.xul", null);
@@ -1335,9 +1382,21 @@ var WebappsUI = {
     }
 
     let uri = Services.io.newURI(aManifest.uri, null, null);
-    document.getElementById("webapps-offline-checkbox").checked = Services.perms.testExactPermission(uri, "offline-app") == Ci.nsIPermissionManager.ALLOW_ACTION;
-    document.getElementById("webapps-geoloc-checkbox").checked = Services.perms.testExactPermission(uri, "geo") == Ci.nsIPermissionManager.ALLOW_ACTION;
-    document.getElementById("webapps-notifications-checkbox").checked = Services.perms.testExactPermission(uri, "desktop-notification") == Ci.nsIPermissionManager.ALLOW_ACTION;
+
+    let perms = [["offline", "offline-app"], ["geoloc", "geo"], ["notifications", "desktop-notifications"]];
+    perms.forEach(function(tuple) {
+      let elem = document.getElementById("webapps-" + tuple[0] + "-checkbox");
+      let currentPerm = Services.perms.testExactPermission(uri, tuple[1]);
+      if ((aManifest.capabilities && (aManifest.capabilities.indexOf(tuple[1]) != -1)) || (currentPerm == Ci.nsIPermissionManager.ALLOW_ACTION)) {
+        elem.checked = true;
+      }
+      else {
+        elem.checked = currentPerm == Ci.nsIPermissionManager.ALLOW_ACTION;
+      }
+      elem.classList.remove("webapps-noperm");
+      elem.classList.add("webapps-perm");
+    });
+
     BrowserUI.pushPopup(this, this._dialog);
     this._dialog.waitForClose();
   },
diff --git a/mobile/chrome/content/webapps.xul b/mobile/chrome/content/webapps.xul
--- a/mobile/chrome/content/webapps.xul
+++ b/mobile/chrome/content/webapps.xul
@@ -56,26 +56,35 @@
 
   <vbox class="prompt-header" id="webapps-title-box">
     <hbox align="center">
-      <image id="webapps-icon" width="48" height="48"/>
+      <image id="webapps-icon"/>
       <vbox flex="1">
         <label crop="center" flex="1" value="&webapps.title;"/>
         <textbox id="webapps-title" flex="1"/>
       </vbox>
     </hbox>
   </vbox>
-  <vbox class="prompt-section prompt-header" id="webapps-perm-box">
+  <vbox class="prompt-section prompt-header" id="webapps-perm-box" oncommand="WebappsUI.checkBox(event)">
     <label crop="center" flex="1" value="&webapps.permissions;"/>
-    <button id="webapps-geoloc-checkbox" type="checkbox" class="button-checkbox" flex="1">
+    <button id="webapps-geoloc-checkbox" perm="geo" type="checkbox" class="button-checkbox webapps-perm" flex="1">
       <image class="button-image-icon"/>
-      <description class="prompt-checkbox-label" flex="1">&webapps.perm.geolocation;</description>
+      <vbox flex="1">
+        <description class="prompt-checkbox-label" flex="1">&webapps.perm.geolocation;</description>
+        <description class="prompt-checkbox-label" id="webapps-geoloc-app">&openwebapps.perm.needed;</description>
+      </vbox>
     </button>
-    <button id="webapps-offline-checkbox" type="checkbox" class="button-checkbox" flex="1">
+    <button id="webapps-offline-checkbox" perm="offline-app" type="checkbox" class="button-checkbox webapps-perm" flex="1">
       <image class="button-image-icon"/>
-      <description class="prompt-checkbox-label" flex="1">&webapps.perm.offline;</description>
+      <vbox flex="1">
+        <description class="prompt-checkbox-label" flex="1">&webapps.perm.offline;</description>
+        <description class="prompt-checkbox-label" id="webapps-offline-app">&openwebapps.perm.needed;</description>
+      </vbox>
     </button>
-    <button id="webapps-notifications-checkbox" type="checkbox" class="button-checkbox" flex="1">
+    <button id="webapps-notifications-checkbox" perm="desktop-notifications" type="checkbox" class="button-checkbox webapps-perm" flex="1">
       <image class="button-image-icon"/>
-      <description class="prompt-checkbox-label" flex="1">&webapps.perm.notifications;</description>
+      <vbox flex="1">
+        <description class="prompt-checkbox-label" flex="1">&webapps.perm.notifications;</description>
+        <description class="prompt-checkbox-label" id="webapps-notifications-app">&openwebapps.perm.needed;</description>
+      </vbox>
     </button>
   </vbox>
   <hbox class="prompt-buttons">
diff --git a/mobile/chrome/jar.mn b/mobile/chrome/jar.mn
--- a/mobile/chrome/jar.mn
+++ b/mobile/chrome/jar.mn
@@ -76,5 +76,5 @@ chrome.jar:
   content/LoginManagerChild.js         (content/LoginManagerChild.js)
   content/fullscreen-video.js          (content/fullscreen-video.js)
   content/fullscreen-video.xhtml       (content/fullscreen-video.xhtml)
-
+  
 % override chrome://global/content/config.xul chrome://browser/content/config.xul
diff --git a/mobile/components/webapps/Makefile.in b/mobile/components/webapps/Makefile.in
--- a/mobile/components/webapps/Makefile.in
+++ b/mobile/components/webapps/Makefile.in
@@ -49,6 +49,7 @@ EXTRA_PP_COMPONENTS = \
 ifndef ANDROID
 EXTRA_COMPONENTS += \
                 WebappsMaemo.js \
+                OpenWebapps.js \
                 $(NULL)
 endif
 
diff --git a/mobile/components/webapps/OpenWebapps.js b/mobile/components/webapps/OpenWebapps.js
new file mode 100644
--- /dev/null
+++ b/mobile/components/webapps/OpenWebapps.js
@@ -0,0 +1,191 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Mobile Browser.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2008
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const Cu = Components.utils; 
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+
+/**
+ * Native implementation of Open Web apps for fennec
+ * manifest format :
+ {
+     "name": "MozillaBall",
+     "description": "Exciting Open Web development action!",
+
+     "base_url": "https://mozillaball.mozillalabs.com",
+     "launch_path": "",
+     "update_path": "manifest/manifest.json",
+
+     "app_urls": [
+       "https://mozillaball.mozillalabs.com/"
+     ],
+
+     "capabilities": [
+       "geolocation"
+     ],
+     "icons": {
+       "16": "icon-16.png",
+       "48": "icon-48.png",
+       "128": "icon-128.png"
+     },
+     "developer": {
+       "name": "Mozilla Labs",
+       "url": "http://mozillalabs.com"
+     }
+     "locales": {
+       "es": {
+         "description": "¡Acción abierta emocionante del desarrollo del Web!",
+         "developer": {
+           "url": "http://es.mozillalabs.com/",
+         }
+       },
+       "it": {
+         "description": "Azione aperta emozionante di sviluppo di fotoricettore!",
+         "developer": {
+           "url": "http://it.mozillalabs.com/"
+         }
+       }
+     },
+     "release": "2010-10-05T09:12:51Z"
+   }
+ */
+
+function OpenWebapps() {
+  this.messageManager = Cc["@mozilla.org/childprocessmessagemanager;1"].getService(Ci.nsISyncMessageSender);
+  this.messageManager.addMessageListener("OpenWebapp:Install:Success", this);
+  this.messageManager.addMessageListener("OpenWebapp:Install:Error", this);
+  this.callbacks = [];
+}
+
+OpenWebapps.prototype = {
+  
+  _getLocaleRoot: function(aManifest) {
+    let res = this.messageManager.sendSyncMessage("OpenWebapp:GetLocale", {});
+    let locale = res[0].locale;
+    
+    let localeRoot;
+
+    if (aManifest.locales)
+      localeRoot = aManifest.locales[locale];
+
+    if (!localeRoot)
+      localeRoot = aManifest;
+    return localeRoot;
+  },
+  
+  install : function(aManifest, aSuccessCallback, aErrorCallback) {
+    Cu.reportError("aManifest=" + aManifest + " " + (typeof aManifest));
+    for (prop in aManifest)
+      Cu.reportError(prop);
+    let localeRoot = this._getLocaleRoot(aManifest);
+
+    let name = localeRoot.name;
+    Cu.reportError("OpenWebapps::install() URL: " + aManifest.base_url);
+    let baseURI = Services.io.newURI(aManifest.base_url, null, null);
+    
+    // choose the larger icon
+    let max = 0;
+    let icon;
+    for (let size in aManifest.icons) {
+      let iSize = parseInt(size);
+      if (iSize > max) {
+        icon = baseURI.resolve(aManifest.icons[size]);
+        max = iSize;
+      }
+    }
+    if (!icon)
+      return;
+    let uri = baseURI.resolve(aManifest.launch_path);
+    this.callbacks[uri] = { success: aSuccessCallback, error: aErrorCallback };
+    res = this.messageManager.sendAsyncMessage("OpenWebapp:Install", { name: name,
+                                                                       uri: uri,
+                                                                       icon: icon,
+                                                                       capabilities: aManifest.capabilities });
+  },
+  
+  receiveMessage: function(aMessage) {
+    let manifest = aMessage.json;
+    // copy to a plain js object to avoid errors in web page :
+    // Call to xpconnect wrapped JSObject ...
+    // [JavaScript Error: "Permission denied to access property ... when calling method: [nsIOpenWebappCallback::completed]"  nsresult: "0x80570021 (NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS)
+    let arg = { };
+    for (let prop in manifest)
+      arg[prop] = manifest[prop];
+
+    switch(aMessage.name) {
+      case "OpenWebapp:Install:Success" :
+        if (this.callbacks[manifest.uri].success)
+          this.callbacks[manifest.uri].success.completed(arg);
+        break;
+      case "OpenWebapp:Install:Error" :
+        if (this.callbacks[manifest.uri].error)
+          this.callbacks[manifest.uri].error.completed(arg);
+        break;
+    }
+    delete this.callbacks[manifest.uri];
+  },
+  
+  isInstalled: function(aManifest) {
+    Cu.reportError("OpenWebapps::install() URL: " + aManifest.base_url);
+    let baseURI = Services.io.newURI(aManifest.base_url, null, null);
+    let uri = baseURI.resolve(aManifest.launch_path);
+    let res = this.messageManager.sendSyncMessage("OpenWebapp:IsInstalled", { uri: uri });
+    return res[0].installed;
+  },
+  
+  // nsIClassInfo implementation
+  getInterfaces: function(countRef) {
+      let interfaces = [Ci.nsIDOMOpenWebapp, Ci.nsIClassInfo, Ci.nsIFrameMessageListener, Ci.nsISupports];
+      countRef.value = interfaces.length;
+      return interfaces;
+  },
+  
+  getHelperForLanguage: function(language) null,
+  implementationLanguage: Ci.nsIProgrammingLanguage.JAVASCRIPT,
+  flags: Ci.nsIClassInfo.DOM_OBJECT,
+  
+  // QI
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIDOMOpenWebapp, Ci.nsIClassInfo]),
+
+  // XPCOMUtils factory
+  classID: Components.ID("{f35c4926-49da-48ac-88c7-809b86a60ca8}")
+};
+
+const NSGetFactory = XPCOMUtils.generateNSGetFactory([OpenWebapps]);
+
diff --git a/mobile/components/webapps/WebappsComponents.manifest b/mobile/components/webapps/WebappsComponents.manifest
--- a/mobile/components/webapps/WebappsComponents.manifest
+++ b/mobile/components/webapps/WebappsComponents.manifest
@@ -3,4 +3,5 @@
 component {78f44708-6dfa-445d-9f5b-e5e1d738904b} WebappsMaemo.js
 contract @mozilla.org/webapps/installer;1 {78f44708-6dfa-445d-9f5b-e5e1d738904b}
 #endif
-
+component {f35c4926-49da-48ac-88c7-809b86a60ca8} OpenWebapps.js
+contract @mozilla.org/openwebapp;1 {f35c4926-49da-48ac-88c7-809b86a60ca8}
diff --git a/mobile/installer/package-manifest.in b/mobile/installer/package-manifest.in
--- a/mobile/installer/package-manifest.in
+++ b/mobile/installer/package-manifest.in
@@ -170,6 +170,7 @@
 @BINPATH@/components/dom_xpath.xpt
 @BINPATH@/components/dom_xul.xpt
 @BINPATH@/components/dom_loadsave.xpt
+@BINPATH@/components/dom_openwebapps.xpt
 @BINPATH@/components/downloads.xpt
 @BINPATH@/components/editor.xpt
 @BINPATH@/components/embed_base.xpt
diff --git a/mobile/locales/en-US/chrome/webapps.dtd b/mobile/locales/en-US/chrome/webapps.dtd
--- a/mobile/locales/en-US/chrome/webapps.dtd
+++ b/mobile/locales/en-US/chrome/webapps.dtd
@@ -3,3 +3,4 @@
 <!ENTITY webapps.perm.geolocation "Location-aware browsing">
 <!ENTITY webapps.perm.offline "Offline data storage">
 <!ENTITY webapps.perm.notifications "Desktop notifications">
+<!ENTITY openwebapps.perm.needed "Needed by the application">
diff --git a/mobile/themes/core/browser.css b/mobile/themes/core/browser.css
--- a/mobile/themes/core/browser.css
+++ b/mobile/themes/core/browser.css
@@ -1288,7 +1288,23 @@ pageaction:not([image]) > hbox >.pageact
   z-index: 500;
 }
 
-/* Android menu ------------------------------------------------------------ */
+/* openwebapps capabilities ------------------------------------------------------------ */
+
+.webapps-noperm description:last-child{
+  color: rgb(192, 0, 0);
+  font-weight: bold;
+  display: block;
+}
+
+.webapps-perm description:last-child{
+  display: none;
+}
+
+#webapps-icon {
+  width: 48px;
+  height: 48px;
+  margin-right: 5px;
+}/* Android menu ------------------------------------------------------------ */
 #appmenu {
   background: rgba(255,255,255,0.95);
   box-shadow: 0 @shadow_width_large@ @shadow_width_xlarge@ @shadow_width_large@ black;
