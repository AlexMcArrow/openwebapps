# HG changeset patch
# Parent f7a5bb314d46ae41bff15de94018f47a43b38a92
Expose Android Intents to chrome

diff --git a/embedding/android/GeckoAppShell.java b/embedding/android/GeckoAppShell.java
--- a/embedding/android/GeckoAppShell.java
+++ b/embedding/android/GeckoAppShell.java
@@ -67,6 +67,8 @@ import android.net.Uri;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 
+import org.json.*;
+
 public class GeckoAppShell
 {
     // static members only
@@ -748,6 +750,252 @@ public class GeckoAppShell
         GeckoApp.mAppContext.startActivity(i);
         return true;
     }
+    
+    static void storeExtraValue(Intent intent, JSONObject o, String prop) {
+        try {
+            boolean foo = o.getBoolean(prop);
+            intent.putExtra(prop, foo);
+        } catch(Exception e) { }
+        try {
+            int foo = o.getInt(prop);
+            intent.putExtra(prop, foo);
+        } catch(Exception e) { }
+        try {
+            long foo = o.getLong(prop);
+            intent.putExtra(prop, foo);
+        } catch(Exception e) { }
+        try {
+            double foo = o.getDouble(prop);
+            intent.putExtra(prop, foo);
+        } catch(Exception e) { }
+        try {
+            String foo = o.getString(prop);
+            intent.putExtra(prop, foo);
+        } catch(Exception e) { }
+    }
+
+    static Intent json2intent(String aIntent) {
+        Intent intent = new Intent();
+        try {
+            JSONObject json = (JSONObject) new JSONTokener(aIntent).nextValue();
+            
+            if (json.has("action"))
+                intent.setAction(json.getString("action"));
+            if (json.has("type"))
+                intent.setType(json.getString("type"));
+            if (json.has("packageName") && json.has("className"))
+                intent.setClassName(json.getString("packageName"), json.getString("className"));
+            else if (json.has("packageName"))
+                intent.setPackage(json.getString("packageName"));
+            if (json.has("data")) {
+                Uri uri = Uri.parse(json.getString("data"));
+                if (uri != null)
+                    intent.setData(uri);
+            }
+            if (json.has("categories")) {
+                JSONArray categories = json.getJSONArray("categories");
+                for (int i = 0; i < categories.length(); i++)
+                    intent.addCategory(categories.getString(i));
+            }
+            if (json.has("flags")) {
+                intent.addFlags(json.getInt("flags"));
+            }
+            if (json.has("extras")) {
+                JSONArray extras = json.getJSONArray("extras");
+                for (int i = 0; i < extras.length(); i++) {
+                    JSONObject extra = extras.getJSONObject(i);
+                    Iterator<String> keys = extra.keys();
+                    while (keys.hasNext()) {
+                        String key = keys.next();
+                        if (!key.equals("_type")) {
+                            storeExtraValue(intent, extra, key);
+                        }
+                        else { // XXX use _type to specify some extra types like |bitmap|, |intent| etc.
+                            
+                        }
+                    }
+                }
+            }
+        } catch(Exception e) {
+            return null;
+        }
+        return intent;
+    }
+
+    static void sendIntent(String aIntent, String aWhat) {
+        Log.w("GeckoAppJava", "sendIntent " + aWhat + " - " + aIntent);
+        Intent intent = json2intent(aIntent);
+        if (intent == null)
+            return;
+
+        if (aWhat.equals("broadcast")) {
+            GeckoApp.mAppContext.sendBroadcast(intent);
+        }
+        if (aWhat.equals("sticky")) {
+            GeckoApp.mAppContext.sendStickyBroadcast(intent);
+        }
+        else if (aWhat.equals("startActivity")) {
+            GeckoApp.mAppContext.startActivity(intent);
+        }
+        else if (aWhat.equals("startService")) {
+            GeckoApp.mAppContext.startService(intent);
+        }
+        else if (aWhat.equals("stopService")) {
+            GeckoApp.mAppContext.stopService(intent);
+        }
+        else {
+            Log.w("GeckoAppJava", "Unknown action " + aWhat);
+        }
+    }
+    
+    static HashMap<String, BroadcastReceiver> sReceivers = new HashMap<String, BroadcastReceiver>();;
+    
+    native static void intentReceiverCallback(String intent, String aId);
+    native static void broadcastReceiverCallback(String intent, String aId);
+
+    static BroadcastReceiver setupIntentReceiver(String aId, boolean aIsBroadcast) {
+        class IntentReceiver extends BroadcastReceiver {
+            IntentReceiver(String aId, boolean aIsBroadcast) {
+                mId = aId;
+                mBroadcast = aIsBroadcast;
+            }
+            
+            String mId;
+            boolean mBroadcast;
+            
+            public void onReceive(Context aContext, Intent aIntent) {
+                Log.w("GeckoAppJava", "onReceive() " + aIntent.getAction());
+                JSONObject json = new JSONObject();
+                try {
+                    json.put("action", aIntent.getAction());
+                    json.put("type", aIntent.getType());
+                    ComponentName component = aIntent.getComponent();
+                    if (component != null) {
+                        json.put("packageName", component.getPackageName());
+                        json.put("className", component.getClassName());
+                    }
+                    json.put("data", aIntent.getDataString());
+                    json.put("flags", aIntent.getFlags());
+                    
+                    Set<String> categories = aIntent.getCategories();
+                    if ((categories != null) &&!categories.isEmpty()) {
+                        JSONArray array = new JSONArray();
+                        Iterator<String > it = categories.iterator();
+                        while (it.hasNext()) {
+                            array.put(it.next());
+                        }
+                        json.put("categories", array);
+                    }
+
+                    Bundle extras = aIntent.getExtras();
+                    Set<String> keys = extras.keySet();
+                    if ((keys != null) && !keys.isEmpty()) {
+                        JSONArray array = new JSONArray();
+                        Iterator<String > it = keys.iterator();
+                        while (it.hasNext()) {
+                            String key = it.next();
+                            JSONObject obj = new JSONObject();
+                            // XXX we get everything as a String
+                            obj.put(key, extras.getString(key));
+                            array.put(obj);
+                        }
+                        json.put("extras", array);
+                    }
+                    
+                } catch(Exception e) {
+                    Log.w("GeckoAppJava", "onReceive:" + e);
+                    e.printStackTrace();
+                    return;
+                }
+                if (mBroadcast)
+                    broadcastReceiverCallback(json.toString(), mId);
+                else
+                    intentReceiverCallback(json.toString(), mId);
+            }
+        }
+        
+        IntentReceiver receiver = new IntentReceiver(aId, aIsBroadcast);
+        return receiver;
+    }
+    
+    static void addIntentReceiver(String aFilter, String aId) {
+        IntentFilter filter = new IntentFilter();
+        Log.w("GeckoAppJava", "addIntentReceiver " + aFilter + " - " + aId);
+        try {
+            JSONObject json = (JSONObject) new JSONTokener(aFilter).nextValue();
+            if (json.has("actions")) {
+                JSONArray actions = json.getJSONArray("actions");
+                for (int i = 0; i < actions.length(); i++)
+                    filter.addAction(actions.getString(i));
+            }
+            if (json.has("categories")) {
+                JSONArray categories = json.getJSONArray("categories");
+                for (int i = 0; i < categories.length(); i++)
+                    filter.addCategory(categories.getString(i));
+            }
+            if (json.has("dataType")) {
+                JSONArray dataType = json.getJSONArray("dataType");
+                for (int i = 0; i < dataType.length(); i++)
+                    filter.addDataType(dataType.getString(i));
+            }
+            if (json.has("dataScheme")) {
+                JSONArray dataScheme = json.getJSONArray("dataScheme");
+                for (int i = 0; i < dataScheme.length(); i++)
+                    filter.addDataScheme(dataScheme.getString(i));
+            }
+            if (json.has("dataPath")) {
+                JSONArray dataPath = json.getJSONArray("dataPath");
+                for (int i = 0; i < dataPath.length(); i++) {
+                    JSONObject entry = dataPath.getJSONObject(i);
+                    if (entry.has("path") && entry.has("type"))
+                        filter.addDataPath(entry.getString("path"), entry.getInt("type"));
+                }
+            }
+            if (json.has("dataAuthority")) {
+                JSONArray dataAuthority = json.getJSONArray("dataAuthority");
+                for (int i = 0; i < dataAuthority.length(); i++) {
+                    JSONObject entry = dataAuthority.getJSONObject(i);
+                    if (entry.has("host") && entry.has("port"))
+                        filter.addDataAuthority(entry.getString("host"), entry.getString("port"));
+                }
+            }
+            if (json.has("priority")) {
+                filter.setPriority(json.getInt("priority"));
+            }
+        } catch(Exception e) {
+            Log.w("GeckoAppJava", "addIntentReceiver : " + e);
+            return;
+        }
+
+        BroadcastReceiver receiver = setupIntentReceiver(aId, false);
+
+        if (!sReceivers.containsKey(aId))
+            sReceivers.put(aId, receiver);
+        GeckoApp.mAppContext.registerReceiver(receiver, filter);
+    }
+    
+    static void removeIntentReceiver(String aId) {
+        Log.w("GeckoAppJava", "removeIntentReceiver " + aId);
+        if (sReceivers.containsKey(aId)) {
+            BroadcastReceiver receiver = sReceivers.get(aId);
+            GeckoApp.mAppContext.unregisterReceiver(receiver);
+            sReceivers.remove(aId);
+        }
+    }
+
+    static void broadcastIntent(String aIntent, String aWhat, String aId) {
+        Log.w("GeckoAppJava", "broadcastIntent " + aId);
+        Intent intent = json2intent(aIntent);
+        if (intent == null)
+            return;
+        BroadcastReceiver receiver = setupIntentReceiver(aId, true);
+        if (aWhat == "ordered") {
+            GeckoApp.mAppContext.sendOrderedBroadcast(intent, null, receiver, null, Activity.RESULT_OK, null, null);
+        }
+        else if (aWhat == "sticky") {
+            GeckoApp.mAppContext.sendStickyOrderedBroadcast(intent, receiver, null, Activity.RESULT_OK, null, null);
+        }
+    }
 
     static String[] getHandlersForMimeType(String aMimeType, String aAction) {
         Intent intent = getIntentForActionString(aAction);
diff --git a/mobile/installer/package-manifest.in b/mobile/installer/package-manifest.in
--- a/mobile/installer/package-manifest.in
+++ b/mobile/installer/package-manifest.in
@@ -278,6 +278,9 @@
 @BINPATH@/components/xultmpl.xpt
 @BINPATH@/components/zipwriter.xpt
 @BINPATH@/components/webapps.xpt
+#ifdef ANDROID
+@BINPATH@/components/androidintents.xpt
+#endif
 
 ; JavaScript components
 @BINPATH@/components/ConsoleAPI.manifest
diff --git a/other-licenses/android/APKOpen.cpp b/other-licenses/android/APKOpen.cpp
--- a/other-licenses/android/APKOpen.cpp
+++ b/other-licenses/android/APKOpen.cpp
@@ -239,6 +239,8 @@ SHELL_WRAPPER0(onLowMemory)
 SHELL_WRAPPER3(callObserver, jstring, jstring, jstring)
 SHELL_WRAPPER1(removeObserver, jstring)
 SHELL_WRAPPER1(onChangeNetworkLinkStatus, jstring)
+SHELL_WRAPPER2(intentReceiverCallback, jstring, jstring)
+SHELL_WRAPPER2(broadcastReceiverCallback, jstring, jstring)
 
 static void * xul_handle = NULL;
 static time_t apk_mtime = 0;
@@ -688,6 +690,8 @@ loadLibs(const char *apkName)
   GETFUNC(callObserver);
   GETFUNC(removeObserver);
   GETFUNC(onChangeNetworkLinkStatus);
+  GETFUNC(intentReceiverCallback);
+  GETFUNC(broadcastReceiverCallback);
 #undef GETFUNC
   gettimeofday(&t1, 0);
   struct rusage usage2;
diff --git a/toolkit/components/Makefile.in b/toolkit/components/Makefile.in
--- a/toolkit/components/Makefile.in
+++ b/toolkit/components/Makefile.in
@@ -74,6 +74,12 @@ PARALLEL_DIRS += \
   webapps \
   $(NULL)
 
+ifeq ($(OS_TARGET),Android)
+PARALLEL_DIRS += \
+  androidintents \
+  $(NULL)
+endif
+
 ifdef BUILD_CTYPES
 PARALLEL_DIRS += \
   ctypes \
diff --git a/toolkit/components/androidintents/Makefile.in b/toolkit/components/androidintents/Makefile.in
new file mode 100644
--- /dev/null
+++ b/toolkit/components/androidintents/Makefile.in
@@ -0,0 +1,65 @@
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is Mozilla Webapp code.
+#
+# The Initial Developer of the Original Code is
+# the Mozilla Foundation.
+# Portions created by the Initial Developer are Copyright (C) 2010
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#    Fabrice Desré <fabrice@mozilla.com>
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either the GNU General Public License Version 2 or later (the "GPL"), or
+# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH		= ../../..
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE_NAME = androidintents
+MODULE      = androidintents
+ 
+ifeq (Android,$(OS_TARGET))
+LIBRARY_NAME    = androidintents_s
+LIBXUL_LIBRARY  = 1
+IS_COMPONENT    = 1
+EXPORT_LIBRARY  = 1
+
+CPPSRCS = \
+        nsAndroidIntentManager.cpp \
+        $(NULL)
+
+EXTRA_DSO_LDOPTS += \
+        $(MOZ_COMPONENT_LIBS) \
+        $(NULL)
+endif
+
+XPIDLSRCS = nsIAndroidIntentManager.idl
+
+include $(topsrcdir)/config/rules.mk
diff --git a/toolkit/components/androidintents/nsAndroidIntentManager.cpp b/toolkit/components/androidintents/nsAndroidIntentManager.cpp
new file mode 100644
--- /dev/null
+++ b/toolkit/components/androidintents/nsAndroidIntentManager.cpp
@@ -0,0 +1,240 @@
+/* -*- Mode: c++; c-basic-offset: 4; tab-width: 20; indent-tabs-mode: nil; -*-
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Webapp code.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsAndroidIntentManager.h"
+#include "AndroidBridge.h"
+#include "nsCRTGlue.h"
+#include "nsPrintfCString.h"
+#include "nsInterfaceHashtable.h"
+#include "nsThreadUtils.h"
+
+using namespace mozilla;
+
+extern "C" {
+    NS_EXPORT void JNICALL Java_org_mozilla_gecko_GeckoAppShell_intentReceiverCallback(JNIEnv *, jclass, jstring aIntent, jstring aId);
+    NS_EXPORT void JNICALL Java_org_mozilla_gecko_GeckoAppShell_broadcastReceiverCallback(JNIEnv *, jclass, jstring aIntent, jstring aId);
+}
+
+NS_IMPL_ISUPPORTS1(nsAndroidIntentManager, nsIAndroidIntentManager)
+
+nsInterfaceHashtable<nsStringHashKey, nsIAndroidReceiver> gIntentReceivers;
+nsInterfaceHashtable<nsStringHashKey, nsIAndroidReceiver> gBroadcastReceivers;
+
+nsAndroidIntentManager::nsAndroidIntentManager()
+{
+  /* member initializers and constructor code */
+  gIntentReceivers.Init(16);
+  gBroadcastReceivers.Init(16);
+}
+
+nsAndroidIntentManager::~nsAndroidIntentManager()
+{
+  /* destructor code */
+}
+
+/* void sendBroadcast (in DOMString intent); */
+NS_IMETHODIMP nsAndroidIntentManager::SendBroadcast(const nsAString & intent)
+{
+    sendIntent(intent, NS_LITERAL_STRING("broadcast"));
+    return NS_OK;
+}
+
+NS_IMETHODIMP nsAndroidIntentManager::SendStickyBroadcast(const nsAString & intent)
+{
+    sendIntent(intent, NS_LITERAL_STRING("sticky"));
+    return NS_OK;
+}
+
+NS_IMETHODIMP nsAndroidIntentManager::SendOrderedBroadcast(const nsAString & intent, nsIAndroidReceiver* aReceiver)
+{
+    sendBroadcast(intent, NS_LITERAL_STRING("ordered"), aReceiver);
+    return NS_OK;
+}
+
+NS_IMETHODIMP nsAndroidIntentManager::SendStickyOrderedBroadcast(const nsAString & intent, nsIAndroidReceiver* aReceiver)
+{
+    sendBroadcast(intent, NS_LITERAL_STRING("sticky"), aReceiver);
+    return NS_OK;
+}
+
+/* void startActivity (in DOMString intent); */
+NS_IMETHODIMP nsAndroidIntentManager::StartActivity(const nsAString & intent)
+{
+    sendIntent(intent, NS_LITERAL_STRING("startActivity"));
+    return NS_OK;
+}
+
+/* void startService (in DOMString intent); */
+NS_IMETHODIMP nsAndroidIntentManager::StartService(const nsAString & intent)
+{
+    sendIntent(intent, NS_LITERAL_STRING("startService"));
+    return NS_OK;
+}
+
+/* void stopService (in DOMString intent); */
+NS_IMETHODIMP nsAndroidIntentManager::StopService(const nsAString & intent)
+{
+    sendIntent(intent, NS_LITERAL_STRING("stopService"));
+    return NS_OK;
+}
+
+void nsAndroidIntentManager::sendIntent(const nsAString & aIntent, const nsAString & aWhat)
+{
+    AndroidBridge::AutoLocalJNIFrame jniFrame;
+    JNIEnv *jEnv = GetJNIForThread();
+    jclass jGeckoAppShellClass = GetGeckoAppShellClass();
+
+    if (!jEnv || !jGeckoAppShellClass)
+        return;
+    
+    nsPromiseFlatString intent(aIntent);
+    nsPromiseFlatString what(aWhat);
+
+    jstring jstrIntent = jEnv->NewString(intent.get(), NS_strlen(intent.get()));
+    jstring jstrWhat   = jEnv->NewString(what.get(), NS_strlen(what.get()));
+    
+    jmethodID jSendIntent = jEnv->GetStaticMethodID(jGeckoAppShellClass, "sendIntent", "(Ljava/lang/String;Ljava/lang/String;)V");
+    jEnv->CallStaticVoidMethod(jGeckoAppShellClass, jSendIntent, jstrIntent, jstrWhat);
+}
+
+void nsAndroidIntentManager::sendBroadcast(const nsAString & aIntent, const nsAString & aWhat, nsIAndroidReceiver* aReceiver)
+{
+    AndroidBridge::AutoLocalJNIFrame jniFrame;
+    JNIEnv *jEnv = GetJNIForThread();
+    jclass jGeckoAppShellClass = GetGeckoAppShellClass();
+
+    if (!jEnv || !jGeckoAppShellClass)
+        return;
+    
+    nsPromiseFlatString intent(aIntent);
+    nsPromiseFlatString what(aWhat);
+    nsAutoString id = NS_ConvertUTF8toUTF16(nsPrintfCString("receiver_%p", aReceiver));
+    
+    jstring jstrIntent = jEnv->NewString(intent.get(), NS_strlen(intent.get()));
+    jstring jstrWhat   = jEnv->NewString(what.get(), NS_strlen(what.get()));
+    jstring jId = jEnv->NewString(id.get(), NS_strlen(id.get()));
+    
+    jmethodID jBroadcastIntent = jEnv->GetStaticMethodID(jGeckoAppShellClass, "broadcastIntent", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
+    jEnv->CallStaticVoidMethod(jGeckoAppShellClass, jBroadcastIntent, jstrIntent, jstrWhat, jId);
+    gBroadcastReceivers.Put(id, aReceiver);
+    NS_ADDREF(aReceiver);
+}
+
+NS_IMETHODIMP nsAndroidIntentManager::AddIntentReceiver(nsAString_internal const& aFilter, nsIAndroidReceiver* aReceiver)
+{
+    AndroidBridge::AutoLocalJNIFrame jniFrame;
+    JNIEnv *jEnv = GetJNIForThread();
+    jclass jGeckoAppShellClass = GetGeckoAppShellClass();
+
+    if (!jEnv || !jGeckoAppShellClass)
+        return NS_ERROR_FAILURE;
+    
+    nsPromiseFlatString filter(aFilter);
+    nsAutoString id = NS_ConvertUTF8toUTF16(nsPrintfCString("receiver_%p", aReceiver));
+    
+    jstring jstrFilter = jEnv->NewString(filter.get(), NS_strlen(filter.get()));
+    jstring jId = jEnv->NewString(id.get(), NS_strlen(id.get()));
+    
+    jmethodID jAddIntentReceiver = jEnv->GetStaticMethodID(jGeckoAppShellClass, "addIntentReceiver", "(Ljava/lang/String;Ljava/lang/String;)V");
+    jEnv->CallStaticVoidMethod(jGeckoAppShellClass, jAddIntentReceiver, jstrFilter, jId);
+    gIntentReceivers.Put(id, aReceiver);
+    NS_ADDREF(aReceiver);
+    return NS_OK;
+}
+
+NS_IMETHODIMP nsAndroidIntentManager::RemoveIntentReceiver(nsIAndroidReceiver* aReceiver)
+{
+    AndroidBridge::AutoLocalJNIFrame jniFrame;
+    JNIEnv *jEnv = GetJNIForThread();
+    jclass jGeckoAppShellClass = GetGeckoAppShellClass();
+
+    if (!jEnv || !jGeckoAppShellClass)
+        return NS_ERROR_FAILURE;
+
+    nsAutoString id = NS_ConvertUTF8toUTF16(nsPrintfCString("receiver_%p", aReceiver));
+
+    jstring jId = jEnv->NewString(id.get(), NS_strlen(id.get()));
+    
+    jmethodID jRemoveIntentReceiver = jEnv->GetStaticMethodID(jGeckoAppShellClass, "removeIntentReceiver", "(Ljava/lang/String;)V");
+    jEnv->CallStaticVoidMethod(jGeckoAppShellClass, jRemoveIntentReceiver, jId);
+    nsIAndroidReceiver* receiver;
+    if (gIntentReceivers.Get(id, &receiver)) {
+        gIntentReceivers.Remove(id);
+    }
+    return NS_OK;
+}
+
+class IntentRunnable : public nsRunnable {
+public:
+    IntentRunnable(nsIAndroidReceiver* aReceiver, nsString aIntent) : mReceiver(aReceiver), mIntent(aIntent) { };
+    
+    NS_IMETHOD Run() {
+        mReceiver->OnReceive(mIntent);
+        NS_WARNING("IntentRunnable::Run()");
+        return NS_OK;
+    }
+protected:
+    nsIAndroidReceiver* mReceiver;
+    nsString mIntent;
+};
+
+NS_EXPORT void JNICALL
+Java_org_mozilla_gecko_GeckoAppShell_intentReceiverCallback(JNIEnv *jenv, jclass, jstring aIntent, jstring aId) {
+    NS_WARNING("intentReceiverCallback()");
+    nsJNIString intent(aIntent, jenv);
+    nsJNIString id(aId, jenv);
+    nsIAndroidReceiver* receiver;
+    if (gIntentReceivers.Get(id, &receiver)) {
+        // Java sends the intent from another thread, so we dispatch it to the main thread.
+        nsCOMPtr<nsIRunnable> runner = new IntentRunnable(receiver, intent);
+        NS_DispatchToMainThread(runner);
+    }
+}
+
+NS_EXPORT void JNICALL
+Java_org_mozilla_gecko_GeckoAppShell_broadcastReceiverCallback(JNIEnv *jenv, jclass, jstring aIntent, jstring aId) {
+    NS_WARNING("broadcastReceiverCallback()");
+    nsJNIString intent(aIntent, jenv);
+    nsJNIString id(aId, jenv);
+    nsIAndroidReceiver* receiver;
+    if (gBroadcastReceivers.Get(id, &receiver)) {
+        // Java sends the intent from another thread, so we dispatch it to the main thread.
+        nsCOMPtr<nsIRunnable> runner = new IntentRunnable(receiver, intent);
+        NS_DispatchToMainThread(runner);
+        gBroadcastReceivers.Remove(id);
+    }
+}
diff --git a/toolkit/components/androidintents/nsAndroidIntentManager.h b/toolkit/components/androidintents/nsAndroidIntentManager.h
new file mode 100644
--- /dev/null
+++ b/toolkit/components/androidintents/nsAndroidIntentManager.h
@@ -0,0 +1,59 @@
+/* -*- Mode: c++; c-basic-offset: 4; tab-width: 20; indent-tabs-mode: nil; -*-
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Webapp code.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef __ANDROID_INTENTMANAGER_H__
+#define __ANDROID_INTENTMANAGER_H__
+
+#include "nsIAndroidIntentManager.h"
+
+class nsAndroidIntentManager : public nsIAndroidIntentManager
+{
+public:
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSIANDROIDINTENTMANAGER
+
+  nsAndroidIntentManager();
+
+private:
+  ~nsAndroidIntentManager();
+
+protected:
+  void sendIntent(const nsAString & intent, const nsAString & what);
+  void sendBroadcast(const nsAString & aIntent, const nsAString & aWhat, nsIAndroidReceiver* aReceiver);
+};
+
+#endif // __ANDROID_INTENT_H__
diff --git a/toolkit/components/androidintents/nsIAndroidIntentManager.idl b/toolkit/components/androidintents/nsIAndroidIntentManager.idl
new file mode 100644
--- /dev/null
+++ b/toolkit/components/androidintents/nsIAndroidIntentManager.idl
@@ -0,0 +1,155 @@
+/* -*- Mode: c++; c-basic-offset: 4; tab-width: 20; indent-tabs-mode: nil; -*-
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Webapp code.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsISupports.idl"
+
+/*
+ * Expose an API to send and broadcast intents, as well as registering broadcast listeners.
+ *
+ * Intents and Intent filters are passed as stringified JSON objects :
+ *
+ * intent properties : "action" (string), "type" (int), "packageName" (String), "className" (String),
+ *                     "data" (String), "categories" ([String]), "flags" (Int),
+ *                     "extras" ([{"prop_name": prop_value}])
+ *                     
+ * intent filters properties : "actions" ([String]), "categories" ([String]), "dataType" ([String]),
+ *                             "dataScheme" ([String]), "dataPath" ([{"path": String, "type": Int}]),
+ *                             "dataAuthority" ([{"host": String, "port": String}]),
+ *                             "priority" (Int)
+ */
+
+[scriptable, function, uuid(fdedc66c-61a5-434e-945e-e4e460701aa2)]
+interface nsIAndroidReceiver : nsISupports {
+  void onReceive(in DOMString intent);
+};
+
+[scriptable, uuid(23adfe00-bdeb-42d1-b574-2339c5e0596c)]
+interface nsIAndroidIntentManager : nsISupports
+{
+  /**
+   * constants copied from http://developer.android.com/reference/android/content/Intent.html
+   */
+  const unsigned long FLAG_ACTIVITY_BROUGHT_TO_FRONT      = 0x00400000;
+  const unsigned long FLAG_ACTIVITY_CLEAR_TASK            = 0x00008000;
+  const unsigned long FLAG_ACTIVITY_CLEAR_TOP             = 0x04000000;
+  const unsigned long FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 0x00080000;
+  const unsigned long FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS  = 0x00800000;
+  const unsigned long FLAG_ACTIVITY_FORWARD_RESULT        = 0x02000000;
+  const unsigned long FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 0x00100000;
+  const unsigned long FLAG_ACTIVITY_MULTIPLE_TASK         = 0x08000000;
+  const unsigned long FLAG_ACTIVITY_NEW_TASK              = 0x10000000;
+  const unsigned long FLAG_ACTIVITY_NO_ANIMATION          = 0x00010000;
+  const unsigned long FLAG_ACTIVITY_NO_HISTORY            = 0x40000000;
+  const unsigned long FLAG_ACTIVITY_NO_USER_ACTION        = 0x00040000;
+  const unsigned long FLAG_ACTIVITY_PREVIOUS_IS_TOP       = 0x01000000;
+  const unsigned long FLAG_ACTIVITY_REORDER_TO_FRONT      = 0x00020000;
+  const unsigned long FLAG_ACTIVITY_RESET_TASK_IF_NEEDED  = 0x00200000;
+  const unsigned long FLAG_ACTIVITY_SINGLE_TOP            = 0x20000000;
+  const unsigned long FLAG_ACTIVITY_TASK_ON_HOME          = 0x00004000;
+  const unsigned long FLAG_DEBUG_LOG_RESOLUTION           = 0x00000008;
+  const unsigned long FLAG_FROM_BACKGROUND                = 0x00000004;
+  const unsigned long FLAG_GRANT_READ_URI_PERMISSION      = 0x00000001;
+  const unsigned long FLAG_GRANT_WRITE_URI_PERMISSION     = 0x00000002;
+  const unsigned long FLAG_RECEIVER_REGISTERED_ONLY       = 0x40000000;
+  const unsigned long FLAG_RECEIVER_REPLACE_PENDING       = 0x20000000;
+
+  /**
+   * constants copied from http://developer.android.com/reference/android/content/IntentFilter.html
+   */
+  const unsigned long SYSTEM_LOW_PRIORITY  = 0xfffffc18;
+  const unsigned long SYSTEM_HIGH_PRIORITY = 0x000003e8;
+  
+  /**
+   * constants copied from http://developer.android.com/reference/android/os/PatternMatcher.html
+   * used for intent filters (dataPath.type)
+   */
+  const unsigned long PATTERN_LITERAL     = 0x00000000;
+  const unsigned long PATTERN_PREFIX      = 0x00000001;
+  const unsigned long PATTERN_SIMPLE_GLOB = 0x00000002;
+
+  /**
+   * Broadcast an intent.
+   *
+   * @param intent the json representation of the intent.
+   */
+  void sendBroadcast(in DOMString intent);
+  
+  /**
+   * Broadcast an intent.
+   *
+   * @param intent the json representation of the intent.
+   */
+  void sendOrderedBroadcast(in DOMString intent, in nsIAndroidReceiver listener);
+  
+  /**
+   * Broadcast an intent.
+   *
+   * @param intent the json representation of the intent.
+   */
+  void sendStickyBroadcast(in DOMString intent);
+
+  /**
+   * Broadcast an intent.
+   *
+   * @param intent the json representation of the intent.
+   */
+  void sendStickyOrderedBroadcast(in DOMString intent, in nsIAndroidReceiver listener);
+  
+  /**
+   * Start an activity.
+   *
+   * @param intent the json representation of the intent.
+   */
+  void startActivity(in DOMString intent);
+  
+  /**
+   * Start a service.
+   *
+   * @param intent the json representation of the intent.
+   */
+  void startService(in DOMString intent);
+  
+  /**
+   * Stop a service.
+   *
+   * @param intent the json representation of the intent.
+   */
+  void stopService(in DOMString intent);
+  
+  void addIntentReceiver(in DOMString filter, in nsIAndroidReceiver listener);
+  void removeIntentReceiver(in nsIAndroidReceiver listener);
+};
diff --git a/toolkit/components/build/Makefile.in b/toolkit/components/build/Makefile.in
--- a/toolkit/components/build/Makefile.in
+++ b/toolkit/components/build/Makefile.in
@@ -81,6 +81,7 @@ endif
 ifeq (Android,$(OS_TARGET))
 LOCAL_INCLUDES += \
   -I$(srcdir)/../webapps \
+  -I$(srcdir)/../androidintents \
   $(NULL)
 endif
 
@@ -126,6 +127,7 @@ endif
 
 ifeq (Android,$(OS_TARGET))
 SHARED_LIBRARY_LIBS += ../webapps/$(LIB_PREFIX)webapps_s.$(LIB_SUFFIX)
+SHARED_LIBRARY_LIBS += ../androidintents/$(LIB_PREFIX)androidintents_s.$(LIB_SUFFIX)
 endif
 
 EXTRA_DSO_LIBS = gkgfx
diff --git a/toolkit/components/build/nsToolkitCompsCID.h b/toolkit/components/build/nsToolkitCompsCID.h
--- a/toolkit/components/build/nsToolkitCompsCID.h
+++ b/toolkit/components/build/nsToolkitCompsCID.h
@@ -122,6 +122,9 @@
 #define NS_WEBAPPSSUPPORT_CONTRACTID \
   "@mozilla.org/webapps/installer;1"
 
+#define NS_ANDROIDINTENT_CONTRACTID \
+  "@mozilla.org/android/intent-manager;1"
+
 /////////////////////////////////////////////////////////////////////////////
 
 // {A0CCAAF8-09DA-44D8-B250-9AC3E93C8117}
@@ -204,3 +207,5 @@
 #define NS_WEBAPPSSUPPORT_CID \
 { 0xd0b62752, 0x88be, 0x4c88, {0x94, 0xe5, 0xc6, 0x9e, 0x15, 0xa1, 0x0c, 0x4e} }
 
+#define NS_ANDROIDINTENT_CID \
+{ 0x0d462ca5, 0x149d, 0x4233, {0xa1, 0xa4, 0x17, 0xe1, 0x25, 0xd8, 0x3d, 0x3f} }
diff --git a/toolkit/components/build/nsToolkitCompsModule.cpp b/toolkit/components/build/nsToolkitCompsModule.cpp
--- a/toolkit/components/build/nsToolkitCompsModule.cpp
+++ b/toolkit/components/build/nsToolkitCompsModule.cpp
@@ -73,6 +73,7 @@
 
 #ifdef ANDROID
 #include "nsWebappsSupport.h"
+#include "nsAndroidIntentManager.h"
 #endif
 
 /////////////////////////////////////////////////////////////////////////////
@@ -129,6 +130,7 @@ NS_GENERIC_FACTORY_CONSTRUCTOR(nsBrowser
 
 #ifdef ANDROID
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsWebappsSupport)
+NS_GENERIC_FACTORY_CONSTRUCTOR(nsAndroidIntentManager)
 #endif
 
 NS_DEFINE_NAMED_CID(NS_TOOLKIT_APPSTARTUP_CID);
@@ -158,6 +160,7 @@ NS_DEFINE_NAMED_CID(NS_CHARSETMENU_CID);
 
 #ifdef ANDROID
 NS_DEFINE_NAMED_CID(NS_WEBAPPSSUPPORT_CID);
+NS_DEFINE_NAMED_CID(NS_ANDROIDINTENT_CID);
 #endif
 
 static const mozilla::Module::CIDEntry kToolkitCIDs[] = {
@@ -187,6 +190,7 @@ static const mozilla::Module::CIDEntry k
   { &kNS_CHARSETMENU_CID, false, NULL, NS_NewCharsetMenu },
 #ifdef ANDROID
   { &kNS_WEBAPPSSUPPORT_CID, false, NULL, nsWebappsSupportConstructor },
+  { &kNS_ANDROIDINTENT_CID, false, NULL, nsAndroidIntentManagerConstructor },
 #endif
   { NULL }
 };
@@ -219,6 +223,7 @@ static const mozilla::Module::ContractID
   { NS_RDF_DATASOURCE_CONTRACTID_PREFIX NS_CHARSETMENU_PID, &kNS_CHARSETMENU_CID },
 #ifdef ANDROID
   { NS_WEBAPPSSUPPORT_CONTRACTID, &kNS_WEBAPPSSUPPORT_CID },
+  { NS_ANDROIDINTENT_CONTRACTID, &kNS_ANDROIDINTENT_CID },
 #endif
   { NULL }
 };
