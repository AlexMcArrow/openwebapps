# HG changeset patch
# Parent 07d18ddbf0ca5f66617bc48d6a3911a203150a9a
# User Fabrice Desr√© <fabrice@mozilla.com>

Bug 599823 - web apps must open external links in the "classic" browser

diff --git a/mobile/chrome/content/browser.js b/mobile/chrome/content/browser.js
--- a/mobile/chrome/content/browser.js
+++ b/mobile/chrome/content/browser.js
@@ -1291,6 +1291,77 @@ Browser.MainDragger.prototype = {
   }
 };
 
+function nsBrowserAccessHelper(aURI, aOpener, aWhere, aContext) {
+  let isExternal = (aContext == Ci.nsIBrowserDOMWindow.OPEN_EXTERNAL);
+  if (isExternal && aURI && aURI.schemeIs("chrome"))
+    return null;
+
+  let loadflags = isExternal ?
+                    Ci.nsIWebNavigation.LOAD_FLAGS_FROM_EXTERNAL :
+                    Ci.nsIWebNavigation.LOAD_FLAGS_NONE;
+  let location;
+  if (aWhere == Ci.nsIBrowserDOMWindow.OPEN_DEFAULTWINDOW) {
+    switch (aContext) {
+      case Ci.nsIBrowserDOMWindow.OPEN_EXTERNAL :
+        aWhere = Services.prefs.getIntPref("browser.link.open_external");
+        break;
+      default : // OPEN_NEW or an illegal value
+        aWhere = Services.prefs.getIntPref("browser.link.open_newwindow");
+    }
+  }
+
+  let browser;
+  if (aWhere == Ci.nsIBrowserDOMWindow.OPEN_NEWWINDOW) {
+    let url = aURI ? aURI.spec : "about:blank";
+    let newWindow = openDialog("chrome://browser/content/browser.xul", "_blank",
+                               "all,dialog=no", url, null, null, null);
+    // since newWindow.Browser doesn't exist yet, just return null
+    return null;
+  } else if (aWhere == Ci.nsIBrowserDOMWindow.OPEN_NEWTAB) {
+    if (document.getElementById("main-window").hasAttribute("webapp")) {
+      // aURI is null, so we can't fake a command line start using nsICommandLineRunner
+      
+      // check if we have a classic browser window opened
+      let win = null;
+      let apps = Services.wm.getEnumerator("navigator:browser");
+      while (apps.hasMoreElements() && !win) {
+        let appWin = apps.getNext().QueryInterface(Ci.nsIDOMWindowInternal);
+        let root = appWin.document.getElementById("main-window");
+        if (!root.hasAttribute("webapp"))
+          win = appWin;
+      }
+      if (win && win.Browser) {
+        return win.nsBrowserAccessHelper(aURI, aOpener, aWhere, aContext);
+      }
+      else {
+        // we need to create a new window and be sure that nsBrowserAcess is available
+        win = Services.ww.openWindow(null, "chrome://browser/content/browser.xul", "_blank", "chrome,dialog=no,all", null);
+        while (!win.browserDOMWindow)
+          Services.tm.currentThread.processNextEvent(true);
+        return win.nsBrowserAccessHelper(aURI, aOpener, aWhere, aContext);
+      }
+    }
+    else {
+      browser = Browser.addTab("about:blank", true, Browser.selectedTab).browser;
+    }
+  } else { // OPEN_CURRENTWINDOW and illegal values
+    browser = Browser.selectedBrowser;
+  }
+
+  try {
+    let referrer;
+    if (aURI) {
+      if (aOpener) {
+        location = aOpener.location;
+        referrer = Services.io.newURI(location, null, null);
+      }
+      browser.loadURIWithFlags(aURI.spec, loadflags, referrer, null, null);
+    }
+    browser.focus();
+  } catch(e) { }
+
+  return browser;
+}
 
 Browser.WebProgress = function WebProgress() {
   messageManager.addMessageListener("Content:StateChange", this);
@@ -1412,66 +1483,13 @@ nsBrowserAccess.prototype = {
     throw Cr.NS_NOINTERFACE;
   },
 
-  _getBrowser: function _getBrowser(aURI, aOpener, aWhere, aContext) {
-    let isExternal = (aContext == Ci.nsIBrowserDOMWindow.OPEN_EXTERNAL);
-    if (isExternal && aURI && aURI.schemeIs("chrome"))
-      return null;
-
-    let loadflags = isExternal ?
-                      Ci.nsIWebNavigation.LOAD_FLAGS_FROM_EXTERNAL :
-                      Ci.nsIWebNavigation.LOAD_FLAGS_NONE;
-    let location;
-    if (aWhere == Ci.nsIBrowserDOMWindow.OPEN_DEFAULTWINDOW) {
-      switch (aContext) {
-        case Ci.nsIBrowserDOMWindow.OPEN_EXTERNAL :
-          aWhere = Services.prefs.getIntPref("browser.link.open_external");
-          break;
-        default : // OPEN_NEW or an illegal value
-          aWhere = Services.prefs.getIntPref("browser.link.open_newwindow");
-      }
-    }
-
-    let browser;
-    if (aWhere == Ci.nsIBrowserDOMWindow.OPEN_NEWWINDOW) {
-      let url = aURI ? aURI.spec : "about:blank";
-      let newWindow = openDialog("chrome://browser/content/browser.xul", "_blank",
-                                 "all,dialog=no", url, null, null, null);
-      // since newWindow.Browser doesn't exist yet, just return null
-      return null;
-    } else if (aWhere == Ci.nsIBrowserDOMWindow.OPEN_NEWTAB) {
-      let owner = isExternal ? null : Browser.selectedTab;
-      let tab = Browser.addTab("about:blank", true, owner, { getAttention: true });
-      if (isExternal)
-        tab.closeOnExit = true;
-      browser = tab.browser;
-      BrowserUI.hidePanel();
-    } else { // OPEN_CURRENTWINDOW and illegal values
-      browser = Browser.selectedBrowser;
-    }
-
-    try {
-      let referrer;
-      if (aURI) {
-        if (aOpener) {
-          location = aOpener.location;
-          referrer = Services.io.newURI(location, null, null);
-        }
-        browser.loadURIWithFlags(aURI.spec, loadflags, referrer, null, null);
-      }
-      browser.focus();
-    } catch(e) { }
-
-    BrowserUI.closeAutoComplete();
-    return browser;
-  },
-
   openURI: function browser_openURI(aURI, aOpener, aWhere, aContext) {
-    let browser = this._getBrowser(aURI, aOpener, aWhere, aContext);
+    let browser = nsBrowserAccessHelper(aURI, aOpener, aWhere, aContext);
     return browser ? browser.contentWindow : null;
   },
 
   openURIInFrame: function browser_openURIInFrame(aURI, aOpener, aWhere, aContext) {
-    let browser = this._getBrowser(aURI, aOpener, aWhere, aContext);
+    let browser = nsBrowserAccessHelper(aURI, aOpener, aWhere, aContext);
     return browser ? browser.QueryInterface(Ci.nsIFrameLoaderOwner) : null;
   },
 
