# HG changeset patch
# Parent 9a537d4687c57536e005c099ca0781d5f8f5719e
# User Fabrice Desré <fabrice@mozilla.com>

Bug 585958 - webapps OS level integration : Maemo

diff --git a/mobile/components/Makefile.in b/mobile/components/Makefile.in
--- a/mobile/components/Makefile.in
+++ b/mobile/components/Makefile.in
@@ -85,4 +85,7 @@ ifdef MOZ_UPDATER
 EXTRA_COMPONENTS += UpdatePrompt.js
 endif
 
+DIRS += webapps \
+        $(NULL)
+
 include $(topsrcdir)/config/rules.mk
diff --git a/mobile/components/webapps/Makefile.in b/mobile/components/webapps/Makefile.in
new file mode 100644
--- /dev/null
+++ b/mobile/components/webapps/Makefile.in
@@ -0,0 +1,56 @@
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is Mozilla Webapp code.
+#
+# The Initial Developer of the Original Code is
+# the Mozilla Foundation <http://www.mozilla.org/>.
+# Portions created by the Initial Developer are Copyright (C) 2008
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#    Fabrice Desré <fabrice@mozilla.com>
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either the GNU General Public License Version 2 or later (the "GPL"), or
+# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH		= ../../..
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+EXTRA_PP_COMPONENTS = \
+                WebappsComponents.manifest \
+                $(NULL)
+                
+ifndef ANDROID
+EXTRA_COMPONENTS += \
+                WebappsMaemo.js \
+                $(NULL)
+endif
+
+include $(topsrcdir)/config/rules.mk
+
diff --git a/mobile/components/webapps/WebappsComponents.manifest b/mobile/components/webapps/WebappsComponents.manifest
new file mode 100644
--- /dev/null
+++ b/mobile/components/webapps/WebappsComponents.manifest
@@ -0,0 +1,6 @@
+# webapps
+#ifndef ANDROID
+component {78f44708-6dfa-445d-9f5b-e5e1d738904b} WebappsMaemo.js
+contract @mozilla.org/webapps/installer;1 {78f44708-6dfa-445d-9f5b-e5e1d738904b}
+#endif
+
diff --git a/mobile/components/webapps/WebappsMaemo.js b/mobile/components/webapps/WebappsMaemo.js
new file mode 100644
--- /dev/null
+++ b/mobile/components/webapps/WebappsMaemo.js
@@ -0,0 +1,244 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Mobile Browser.
+ *
+ * The Initial Developer of the Original Code is Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2008
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const Cu = Components.utils; 
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/debianPackager.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+
+function MaemoInstaller() {
+}
+
+MaemoInstaller.prototype = {
+  // create subdirs as needed like |mkdir -p path/to/foo/bar|
+  _createSubdirs: function(root, subdirs) {
+    let dest = root.clone();
+    try {
+      subdirs.forEach(function(dir) {
+        dest.append(dir);
+        if (!dest.exists())
+          dest.create(Ci.nsIFile.DIRECTORY_TYPE, 0755);
+      });
+    } catch(e) {
+      throw "Unable to create directory " + dest.path + " " + e;
+    }
+    return dest;
+  }, 
+  
+  // entry point
+  installApplication: function(aTitle, aURI, aIconURI, aIconData) {
+    // create our temp directory structure
+    let self = this;
+    let tmpDir = Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties).get("TmpD", Ci.nsIFile);
+    let mozDir = tmpDir.clone();
+    mozDir.append("mozwebapps");
+    let cleaner = {
+      clean: function() {
+        if (mozDir.exists())
+          mozDir.remove(true);
+      }
+    }
+
+    // do some cleaning first
+    cleaner.clean();
+
+    let dataDir;
+    let iconDir;
+    let desktopDir;
+    let controlDir;
+    try {
+      dataDir = this._createSubdirs(tmpDir, ["mozwebapps", "data"]);
+      iconDir = this._createSubdirs(dataDir, ["usr", "share", "icons", "hicolor", "64x64", "hildon"]);
+      desktopDir = this._createSubdirs(dataDir, ["usr", "share", "applications", "hildon"]);
+      controlDir = this._createSubdirs(tmpDir, ["mozwebapps", "control"]);
+    } catch(e) {
+      dump(e + "\n");
+      cleaner.clean();
+      throw e;
+    }
+
+    Cu.import("resource:///modules/debianPackager.jsm");
+    let safeName = DebianPackager.getSafePackageName(aURI);
+
+    // creates the control object
+    let base64 = aIconData.substring(22);
+    let iconString = "\n";
+    while (base64.length >= 64) {
+      iconString += " " + base64.substring(0, 64) + "\n";
+      base64 = base64.substring(64);
+    }
+    
+    if (base64.length > 0)
+      iconString += " " + base64 + "\n";
+                                
+    let aControl = {
+      "Package": "moz-" + safeName,
+      "Version": "1.0",
+      "Section": "user/network",
+      "Priority": "standard",
+      "Architecture": "all",
+      "Maintainer": "Mobile Feedback <mobile-feedback@mozilla.com>",
+      "Maemo-Display-Name": aTitle,
+      "Description": aTitle,
+      "Maemo-Icon-26": iconString
+    };
+
+    let file = controlDir.clone();
+    file.append("postinst");
+    try {
+      let conv = DebianPackager.createTextFile(file);
+      conv.writeString("#!/bin/sh\n");
+      conv.writeString("touch /usr/share/applications/hildon\n");
+      conv.writeString("touch /usr/share/icons/hicolor\n");
+      conv.flush();
+      conv.close();
+    } catch(e) {
+      dump("Error creating " + file.path + " : " + e + "\n");
+      cleaner.clean();
+      throw e;
+    }
+
+    file = controlDir.clone();
+    file.append("prerm");
+    try {
+      let conv = DebianPackager.createTextFile(file);
+      conv.writeString("#!/bin/sh\n");
+      conv.flush();
+      conv.close();
+    } catch(e) {
+      dump("Error creating " + file.path + " : " + e + "\n");
+      cleaner.clean();
+      throw e;
+    }
+
+    // prepare the data directory
+    // store the desktop file
+    file = desktopDir.clone();
+    file.append("moz-" + safeName + ".desktop");
+    try {
+      let conv = DebianPackager.createTextFile(file);
+      let execd = Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties).get("CurProcD", Ci.nsIFile);
+      execd.append("fennec");
+      conv.writeString("[Desktop Entry]\n");
+      conv.writeString("Version=1.0\n");
+      conv.writeString("Type=Application\n");
+      conv.writeString("Encoding=UTF-8\n");
+      conv.writeString("Categories=Network;WebBrowser;\n");
+      conv.writeString("X-HildonDesk-ShowInToolbar=true\n");
+      conv.writeString("X-Osso-Type=application/x-executable\n");
+      conv.writeString("StartupNotify=true\n");
+      conv.writeString("Name=" + aTitle + "\n");
+      conv.writeString("Exec=" + execd.path + " --webapp=" + aURI + "\n");
+      conv.writeString("Icon=moz-" + safeName + "\n");
+      conv.flush();
+      conv.close();
+    } catch(e) {
+      dump("Error creating " + file.path + " : " + e + "\n");
+      throw e;
+    }
+
+    // image saving is asynchronous, so we must use a listener to be notified
+    // when it's really done. Otherwise we may pack a 0 byte icon file.
+    let _done = false;
+    let iconListener = {
+      QueryInterface: function(aIID) {
+        if (aIID.equals(Ci.nsIWebProgressListener) ||
+          aIID.equals(Components.interfaces.nsISupports))
+        return this;
+        throw Components.results.NS_NOINTERFACE;
+      },
+      onStateChange: function(aProgress, aRequest, aFlag, aStatus) {
+         if ((aFlag & Ci.nsIWebProgressListener.STATE_STOP) && aStatus == 0) {
+            _done = true;
+         }
+      },
+      onLocationChange: function() {},
+      onProgressChange: function() {},
+      onStatusChange: function() {},
+      onSecurityChange: function() {}
+    };
+
+    // store the icon. If we have a .png or .jpeg, use it. If not, use
+    // our canvas drawn png
+    file = iconDir.clone();
+    let ext = aIconURI.split(".").reverse()[0].toLowerCase();
+    let uri = aIconURI;
+    if ((ext != "png") && (ext != "jpg")) {
+      ext = "png";
+      uri = aIconData;
+    }
+    file.append("moz-" + safeName + "." + ext);
+    let wbp = Cc['@mozilla.org/embedding/browser/nsWebBrowserPersist;1'].createInstance(Ci.nsIWebBrowserPersist);
+    wbp.persistFlags = Ci.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES | Ci.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
+    
+    // set up a progress listener to be notified when our icon is saved on disk
+    wbp.progressListener = iconListener;
+    let ios = Cc['@mozilla.org/network/io-service;1'].getService(Ci.nsIIOService);
+    wbp.saveURI(ios.newURI(uri, "UTF8", null), null, null, null, null, file);
+
+    // we need to make this synchronous to have this function throwing, and not
+    // the async listener
+    while (!_done)
+      Services.tm.currentThread.processNextEvent(true);
+
+    let debFile;
+    try {
+      debFile = DebianPackager.build(mozDir, tmpDir, "mozilla.deb", aControl);
+      Cc["@mozilla.org/uriloader/external-helper-app-service;1"].getService(Ci.nsPIExternalAppLauncher).deleteTemporaryFileOnExit(debFile);
+      try {
+        debFile.QueryInterface(Ci.nsILocalFile).launch();
+      } catch(e) {
+        Cu.reportError("Unable to launch " + debFile.QueryInterface(Ci.nsILocalFile).path);
+        throw e;
+      }
+      cleaner.clean();
+    } catch(e) {
+      throw e;
+    }
+  },
+  
+  // QI
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebappsSupport]),
+
+  // XPCOMUtils factory
+  classID: Components.ID("{78f44708-6dfa-445d-9f5b-e5e1d738904b}"),
+};
+
+const NSGetFactory = XPCOMUtils.generateNSGetFactory([MaemoInstaller]);
+
diff --git a/mobile/installer/package-manifest.in b/mobile/installer/package-manifest.in
--- a/mobile/installer/package-manifest.in
+++ b/mobile/installer/package-manifest.in
@@ -332,6 +332,10 @@
 @BINPATH@/components/amContentHandler.js
 @BINPATH@/components/amWebInstallListener.js
 @BINPATH@/components/nsBlocklistService.js
+@BINPATH@/components/WebappsComponents.manifest
++#ifdef MAEMO
++@BINPATH@/components/WebappsMaemo.js
++#endif
 #ifdef MOZ_UPDATER
 @BINPATH@/components/nsUpdateService.manifest
 @BINPATH@/components/nsUpdateService.js
diff --git a/mobile/modules/Makefile.in b/mobile/modules/Makefile.in
--- a/mobile/modules/Makefile.in
+++ b/mobile/modules/Makefile.in
@@ -43,10 +43,16 @@ VPATH      = @srcdir@
 include $(DEPTH)/config/autoconf.mk
 
 EXTRA_JS_MODULES = \
-  linuxTypes.jsm \
   video.jsm \
   $(NULL)
 
+ifndef ANDROID
+EXTRA_JS_MODULES += \
+  debianPackager.jsm \
+  linuxTypes.jsm \
+  $(NULL)
+endif
+
 EXTRA_PP_JS_MODULES = \
   contacts.jsm \
   $(NULL)
diff --git a/mobile/modules/debianPackager.jsm b/mobile/modules/debianPackager.jsm
new file mode 100644
--- /dev/null
+++ b/mobile/modules/debianPackager.jsm
@@ -0,0 +1,239 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Mobile Browser.
+ *
+ * The Initial Developer of the Original Code is Mozilla.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *  Fabrice Desré <fabrice@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let EXPORTED_SYMBOLS = ["DebianPackager"];
+
+const Cu = Components.utils;
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+let DebianPackager = {
+  /**  builds a debian package. The files to be included in the package must
+  * be layout like this :
+  * aBaseDir
+  *    |- control
+  *    |    |- control
+  *    |    |- postinst
+  *    |    +- prerm
+  *    +- data
+  *         |- ...
+  *         +- ...
+  * the data directory contains a mirror of the files to install
+  * @aBaseDir : the base directory from where we get the files to package, as a nsIFile
+  * @aPackageDir : the directory where we'll store the .deb, as a nsIFile
+  * @aPackageName : the name of the .deb file to create. It will be written in the baseDir directory
+  * @aControl : optional parameter to transmit control information as a JSON object. Ignored if a control
+  *             file exists. When using aControl, the Installed-size field will be computed by a recursive
+  *             descent in the data subdirectory.
+  * @return The deb file as a nsIFile, or throws an exception if something goes wrong.
+  */
+  build: function(aBaseDir, aPackageDir, aPackageName, aControl) {
+    if (!aBaseDir instanceof Ci.nsIFile)
+      throw "DebianPackager::build() : aBaseDir must be a nsIFile";
+
+    if (!aPackageName)
+      throw "DebianPackager::build() : aPackageName must not be null";
+
+    let dataDir = aBaseDir.clone();
+    dataDir.append("data");
+    if (!dataDir.exists())
+      throw "DebianPackager::build() : data subdirectory does not exist.";
+
+    // writes the control file if needed
+    let controlDir = aBaseDir.clone();
+    controlDir.append("control");
+    if (!controlDir.exists())
+      throw "DebianPackager::build() : control subdirectory does not exist.";
+    let controlFile = controlDir.clone();
+    controlFile.append("control");
+    if (!controlFile.exists()) {
+      // create the control file using the aControl object
+      if (!aControl)
+        throw "DebianPackager::build() : you must provide either a control file or a aControl object";
+      try {
+        let conv = this.createTextFile(controlFile);
+        let size = this._getDirectorySize(dataDir);
+        conv.writeString("Installed-Size: " + Math.round(size / 1024) + "\n");
+        for (field in aControl)
+          conv.writeString(field + ": " + aControl[field] + "\n");
+      } catch(e) {
+        throw e;
+      }
+    }
+    
+    // create control.tar.gz and data.tar.gz
+    let controlTgz = this._createArchive(controlDir, aBaseDir, "control.tar.gz");
+    if (!controlTgz)
+      throw "DebianPackager::build() : unable to create control.tar.gz file";
+    let dataTgz = this._createArchive(dataDir, aBaseDir, "data.tar.gz");
+    if (!controlTgz)
+      throw "DebianPackager::build() : unable to create data.tar.gz file";
+
+    // now build our .deb file, which is in ar format
+    // see http://en.wikipedia.org/wiki/Ar_%28Unix%29
+    let debFile = aPackageDir.clone();
+    debFile.append(aPackageName);
+    try {
+      if (debFile.exists())
+        debFile.remove(false);
+      debFile.create(Ci.nsIFile.NORMAL_FILE_TYPE, 0644);
+      let foStream = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
+      foStream.init(debFile, 0x02 | 0x08 | 0x20, 0666, 0);
+      let now = Math.round(new Date().getTime() / 1000) + "";
+      let header = "!<arch>\n";
+      
+      // we need a buffered stream to use the writeFrom method
+      let boStream = Cc["@mozilla.org/network/buffered-output-stream;1"].createInstance(Ci.nsIBufferedOutputStream);
+      boStream.init(foStream, 1024);
+      boStream.write(header, header.length);
+      
+      // hard code the debian-binary file entry, since tt's a simple text file
+      this._appendPaddedString(boStream, "debian-binary", 16);
+      this._appendPaddedString(boStream, now, 12);
+      this._appendPaddedString(boStream, "0", 6);
+      this._appendPaddedString(boStream, "0", 6);
+      this._appendPaddedString(boStream, "100644", 8);
+      this._appendPaddedString(boStream, "4", 10);
+      boStream.write("`\n", 2);
+      boStream.write("2.0\n", 4);
+
+      this._includeFile(boStream, controlTgz, now);
+      this._includeFile(boStream, dataTgz, now);
+
+      boStream.flush();
+      boStream.close();
+    } catch(e) {
+      throw e;
+    }
+    return debFile;
+  },
+
+  /**
+    * creates a string usable as a package name : only allows letters, digits and -+._
+    * @param aString : the string to use as a base for the package name
+    */
+  getSafePackageName: function(aString) {
+    let safeName = "";
+    for (let i = 0; i < aString.length; i++) {
+      let c = aString[i];
+      if (((c >= 'a') && (c <= 'z')) ||
+         ((c >= 'A') && (c <= 'Z')) ||
+         (c == '-') || (c == '+') || (c == '.') || (c == '_'))
+        safeName += c;
+      else
+        safeName += "_" + aString.charCodeAt(i) + "_";
+    }
+    return safeName;
+  },
+
+  // computes the size of a directory
+  _getDirectorySize: function(dir) {
+    let size = 0;
+    let entries = dir.directoryEntries;
+    while (entries.hasMoreElements()) {
+      let file = entries.getNext().QueryInterface(Ci.nsIFile);
+      if (file.isFile())
+        size += file.fileSize;
+      else if (file.isDirectory())
+        size += this._getDirectorySize(file);
+    }
+    return size;
+  },
+
+  // creates a text file and returns a utf-8 converter to write in
+  createTextFile: function(file) {
+    let converter;
+    try {
+      file.create(Ci.nsIFile.NORMAL_FILE_TYPE, 0644);
+      let foStream = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
+      foStream.init(file, 0x02 | 0x08 | 0x20, 0666, 0); 
+      converter = Cc["@mozilla.org/intl/converter-output-stream;1"].createInstance(Ci.nsIConverterOutputStream);
+      converter.init(foStream, "UTF-8", 0, 0);
+    } catch(e) {
+      throw e;
+    }
+    return converter;
+  },
+    
+  // creates a .tar.gz archive of the given directory
+  _createArchive: function(from, to, name) {
+    let file = to.clone();
+    file.append(name);
+    let process = Cc["@mozilla.org/process/util;1"].createInstance(Ci.nsIProcess);
+    let tar = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
+    tar.initWithPath("/bin/tar");
+    let args = ["czf", file.path, "-C", from.path, "."];
+    try {
+      process.init(tar);
+      process.run(true, args, args.length);
+    } catch(e) {
+      dump("process.run() : " + e + "\n");
+      return null;
+    }
+    return file;
+  },
+
+  // pads a string with blanks to the right
+  _padString: function(str, size) {
+    while (str.length != size)
+      str += " ";
+    return str;
+  },
+
+  // writes a padded string to a file outputstream
+  _appendPaddedString: function(stream, str, size) {
+    stream.write(this._padString(str, size), size);
+  },
+    
+  _includeFile: function(foStream, file, now) {
+    let size = file.fileSize;
+    this._appendPaddedString(foStream, file.leafName, 16);
+    this._appendPaddedString(foStream, now, 12);
+    this._appendPaddedString(foStream, "0", 6);
+    this._appendPaddedString(foStream, "0", 6);
+    this._appendPaddedString(foStream, "100644", 8);
+    this._appendPaddedString(foStream, size + "" , 10);
+    foStream.write("`\n", 2);
+    
+    let fiStream = Cc["@mozilla.org/network/file-input-stream;1"].createInstance(Ci.nsIFileInputStream);  
+    fiStream.init(file, -1, -1, false);
+    foStream.writeFrom(fiStream, size);
+    // we must pad the file to an even length 
+    if ((size % 2) == 1)
+      foStream.write("\n", 1);
+    fiStream.close();
+  },
+};
